/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Visao.Telas;
import Persistencia.Dao.AtendimentoDAO;
import Persistencia.Dao.PacienteDAO;
import Persistencia.Dao.ProntuarioDAO;
import Persistencia.Entity.Atendimento;
import Persistencia.Entity.Estagiario;
import Regradenegocio.AtendimentoRN;
import Regradenegocio.PacienteRN;
import VO.AtendimentoVO;
import VO.PacienteVO;
import VO.ProntuarioEletronicoVO;
import Visao.Components.SimpleForm;
import Visao.JframeManager.FormManager;
import Visao.Utils.EditorTextPaneEstilization;
import Visao.Utils.MessagesAlert;
import Visao.Utils.RedimencionarIcones;

import javax.swing.*;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 *
 * @author john
 */
public class FormAtendimento extends SimpleForm {
    private String relatoAtendimento;
    private final MessagesAlert messagesAlert;

    /**
     * Creates new form atendimentoForm
     */
    public FormAtendimento() {
        initComponents();
        messagesAlert = new MessagesAlert();
        //redimensionarIcones();

        EditorTextPaneEstilization.EstilizeEditorTextPane(tpDescricao);

        RedimencionarIcones redimencionarIcone = new RedimencionarIcones();
        redimencionarIcone.redimensionarIcones(btSalvar, "/Multimidia/imagens/approved-icon.png");
        redimencionarIcone.redimensionarIcones(btAnexar, "/Multimidia/imagens/anexar.png");
        
        EditorTextPaneEstilization.EstilizeEditorTextPane(tpDescricao);
        EditorTextPaneEstilization.JTextComponentStylization(tpDescricao, btNegrito, btItalico, btSublinhado);
        EditorTextPaneEstilization.JTextComponentUndoRedo(tpDescricao);

        inicializarComboBoxPacientes();
    }

//    public FormAtendimento(String relato) {
//        this();
//        initComponents();
//        //redimensionarIcones();
//
//        if (relato != null && !relato.trim().isEmpty()) {
//            tpDescricao.setText(relato);
//        }
//
////        EditorTextPaneEstilization.EstilizeEditorTextPane(tpDescricao);
//
//        RedimencionarIcones redimencionarIcone = new RedimencionarIcones();
//        redimencionarIcone.redimensionarIcones(btSalvar, "/Multimidia/imagens/salvar-btn.png");
//        redimencionarIcone.redimensionarIcones(btAnexar, "/Multimidia/imagens/anexar.png");
//
//        inicializarComboBoxPacientes();
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateChooser1 = new com.raven.datechooser.DateChooser();
        pCentro = new javax.swing.JPanel();
        lbPaciente = new javax.swing.JLabel();
        ldDescricao = new javax.swing.JLabel();
        lbResponsavel = new javax.swing.JLabel();
        lbData = new javax.swing.JLabel();
        lbNomeResponsavel = new javax.swing.JLabel();
        btAnexar = new javax.swing.JButton();
        btSalvar = new javax.swing.JButton();
        lbHora = new javax.swing.JLabel();
        ftfHora = new javax.swing.JFormattedTextField();
        cbbPaciente = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane4 = new javax.swing.JScrollPane();
        tpDescricao = new javax.swing.JTextPane();
        lbEmergencial = new javax.swing.JLabel();
        cbEmergencial = new javax.swing.JCheckBox();
        cbData = new javax.swing.JComboBox<>();
        btNegrito = new javax.swing.JButton();
        btItalico = new javax.swing.JButton();
        btSublinhado = new javax.swing.JButton();
        tfData = new javax.swing.JTextField();
        pNorth = new javax.swing.JPanel();
        lbClinica = new javax.swing.JLabel();
        lbProntuario = new javax.swing.JLabel();

        dateChooser1.setTextField(tfData);

        setMaximumSize(new java.awt.Dimension(1000, 680));
        setMinimumSize(new java.awt.Dimension(1000, 680));
        setPreferredSize(new java.awt.Dimension(1000, 680));
        setLayout(new java.awt.BorderLayout());

        pCentro.setBackground(java.awt.SystemColor.controlHighlight);
        pCentro.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        pCentro.setPreferredSize(new java.awt.Dimension(1024, 768));

        lbPaciente.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbPaciente.setForeground(new java.awt.Color(0, 102, 102));
        lbPaciente.setText("*Paciente:");

        ldDescricao.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        ldDescricao.setForeground(new java.awt.Color(0, 102, 102));
        ldDescricao.setText("Observações:");

        lbResponsavel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbResponsavel.setForeground(new java.awt.Color(0, 102, 102));
        lbResponsavel.setText("Responsável:");

        lbData.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbData.setForeground(new java.awt.Color(0, 102, 102));
        lbData.setText("*Data:");

        lbNomeResponsavel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbNomeResponsavel.setText("Beltrano");

        btAnexar.setBackground(new java.awt.Color(204, 204, 204));
        btAnexar.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btAnexar.setForeground(new java.awt.Color(51, 51, 51));
        btAnexar.setText("Texto do Relato");
        btAnexar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAnexarActionPerformed(evt);
            }
        });

        btSalvar.setBackground(new java.awt.Color(102, 255, 102));
        btSalvar.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btSalvar.setForeground(new java.awt.Color(51, 51, 51));
        btSalvar.setText("Salvar");
        btSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSalvarActionPerformed(evt);
            }
        });

        lbHora.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbHora.setForeground(new java.awt.Color(0, 102, 102));
        lbHora.setText("*Hora:");

        try {
            ftfHora.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        ftfHora.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ftfHora.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        cbbPaciente.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        tpDescricao.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jScrollPane4.setViewportView(tpDescricao);

        lbEmergencial.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbEmergencial.setForeground(new java.awt.Color(0, 102, 102));
        lbEmergencial.setText("Emergencial:");

        cbEmergencial.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        cbData.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        cbData.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout pCentroLayout = new javax.swing.GroupLayout(pCentro);
        pCentro.setLayout(pCentroLayout);
        pCentroLayout.setHorizontalGroup(
            pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pCentroLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pCentroLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btAnexar)
                .addGap(18, 18, 18)
                .addComponent(btSalvar)
                .addGap(44, 44, 44))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pCentroLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4)
                    .addGroup(pCentroLayout.createSequentialGroup()
                        .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbPaciente)
                            .addComponent(cbbPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pCentroLayout.createSequentialGroup()
                                .addComponent(lbResponsavel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbNomeResponsavel))
                            .addComponent(ldDescricao))
                        .addGap(60, 60, 60)
                        .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pCentroLayout.createSequentialGroup()
                                .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbData)
                                    .addGroup(pCentroLayout.createSequentialGroup()
                                        .addComponent(cbData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfData, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbHora)
                                    .addComponent(ftfHora, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 212, Short.MAX_VALUE))
                            .addGroup(pCentroLayout.createSequentialGroup()
                                .addComponent(lbEmergencial)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(pCentroLayout.createSequentialGroup()
                                .addComponent(cbEmergencial, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 257, Short.MAX_VALUE)
                                .addComponent(btNegrito)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btItalico)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btSublinhado)))))
                .addGap(25, 25, 25))
        );
        pCentroLayout.setVerticalGroup(
            pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pCentroLayout.createSequentialGroup()
                .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pCentroLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(lbPaciente))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pCentroLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbData)
                            .addComponent(lbHora))))
                .addGap(18, 18, 18)
                .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tfData)
                    .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(cbbPaciente)
                        .addComponent(ftfHora)
                        .addComponent(cbData)))
                .addGap(18, 18, 18)
                .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbNomeResponsavel)
                    .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(pCentroLayout.createSequentialGroup()
                            .addComponent(lbResponsavel)
                            .addGap(29, 29, 29)
                            .addComponent(ldDescricao))
                        .addGroup(pCentroLayout.createSequentialGroup()
                            .addComponent(lbEmergencial)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cbEmergencial, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btNegrito, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btItalico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btSublinhado))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btSalvar)
                    .addComponent(btAnexar))
                .addContainerGap(81, Short.MAX_VALUE))
        );

        lbNomeResponsavel.getAccessibleContext().setAccessibleName("");

        add(pCentro, java.awt.BorderLayout.CENTER);

        pNorth.setBackground(new java.awt.Color(0, 102, 102));
        pNorth.setPreferredSize(new java.awt.Dimension(638, 183));

        lbClinica.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbClinica.setForeground(new java.awt.Color(255, 255, 255));
        lbClinica.setText("Clínica de Psicologia");

        lbProntuario.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        lbProntuario.setForeground(new java.awt.Color(255, 255, 255));
        lbProntuario.setText("Atendimento");

        javax.swing.GroupLayout pNorthLayout = new javax.swing.GroupLayout(pNorth);
        pNorth.setLayout(pNorthLayout);
        pNorthLayout.setHorizontalGroup(
            pNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pNorthLayout.createSequentialGroup()
                .addContainerGap(248, Short.MAX_VALUE)
                .addGroup(pNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbClinica)
                    .addComponent(lbProntuario))
                .addGap(0, 593, Short.MAX_VALUE))
        );
        pNorthLayout.setVerticalGroup(
            pNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pNorthLayout.createSequentialGroup()
                .addGap(0, 72, Short.MAX_VALUE)
                .addComponent(lbProntuario)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbClinica)
                .addGap(0, 63, Short.MAX_VALUE))
        );

        add(pNorth, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    private void btAnexarActionPerformed(java.awt.event.ActionEvent evt) {
        FormProduzirRelato formRelato = new FormProduzirRelato(relato -> {
            if (relato != null && !relato.trim().isEmpty()) {
                this.relatoAtendimento = relato;
                messagesAlert.showSuccessMessage("Texto do relato adicionado com sucesso.");
            } else {
                messagesAlert.showErrorMessage("O texto do relato não pode estar vazio.");
            }
        });

        FormManager.showForm(formRelato);
    }

    private void btSalvarActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            MessagesAlert messagesAlert = new MessagesAlert();

            if (!validarCampos()) {
                return;
            }

            // Validação dos campos obrigatórios
            if (cbbPaciente.getSelectedIndex() == -1 || cbData.getSelectedItem() == null || ((String) cbData.getSelectedItem()).isEmpty() || ftfHora.getText().trim().isEmpty()) {
                messagesAlert.showErrorMessage("Todos os campos obrigatórios devem ser preenchidos.");
                return;
            }

            // Configuração do formato de data e hora
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
            LocalDate data = LocalDate.parse((String) cbData.getSelectedItem(), formatter);
            LocalTime hora = LocalTime.parse(ftfHora.getText());

            // Recuperação do paciente selecionado
            PacienteVO pacienteSelecionado = (PacienteVO) cbbPaciente.getSelectedItem();
            if (pacienteSelecionado == null) {
                messagesAlert.showErrorMessage("Erro ao recuperar o paciente selecionado.");
                return;
            }

            // Recuperação do prontuário a partir do paciente selecionado
            PacienteRN pacienteRN = new PacienteRN();
            ProntuarioEletronicoVO prontuario = pacienteRN.buscarProntuarioPorPacienteId(pacienteSelecionado.getId());
            if (prontuario == null) {
                messagesAlert.showErrorMessage("Erro ao recuperar o prontuário do paciente.");
                return;
            }

            // Simulação de estagiário logado
            Estagiario estagiario = new Estagiario();
            estagiario.setId(1);

            // Criação do objeto Atendimento
            AtendimentoRN atendimentoRN = new AtendimentoRN();
            Atendimento atendimento = atendimentoRN.preencherAtendimento(
                    data, hora, prontuario.toEntity(), estagiario, relatoAtendimento, true, null, cbEmergencial.isSelected());

            // Persistência no banco de dados
            atendimentoRN.salvarAtendimento(AtendimentoVO.fromEntity(atendimento));
            messagesAlert.showSuccessMessage("Atendimento salvo com sucesso!");

            // Limpar o formulário
            limparFormulario();
        } catch (Exception e) {
            MessagesAlert messagesAlert = new MessagesAlert();
            messagesAlert.showErrorMessage("Erro ao salvar atendimento: " + e.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAnexar;
    private javax.swing.JButton btItalico;
    private javax.swing.JButton btNegrito;
    private javax.swing.JButton btSalvar;
    private javax.swing.JButton btSublinhado;
    private javax.swing.JComboBox<String> cbData;
    private javax.swing.JCheckBox cbEmergencial;
    private javax.swing.JComboBox<String> cbbPaciente;
    private com.raven.datechooser.DateChooser dateChooser1;
    private javax.swing.JFormattedTextField ftfHora;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbClinica;
    private javax.swing.JLabel lbData;
    private javax.swing.JLabel lbEmergencial;
    private javax.swing.JLabel lbHora;
    private javax.swing.JLabel lbNomeResponsavel;
    private javax.swing.JLabel lbPaciente;
    private javax.swing.JLabel lbProntuario;
    private javax.swing.JLabel lbResponsavel;
    private javax.swing.JLabel ldDescricao;
    private javax.swing.JPanel pCentro;
    private javax.swing.JPanel pNorth;
    private javax.swing.JTextField tfData;
    private javax.swing.JTextPane tpDescricao;
    // End of variables declaration//GEN-END:variables

    private void inicializarComboBoxPacientes() {
        try {
            PacienteRN pacienteRN = new PacienteRN();
            List<PacienteVO> pacientes = pacienteRN.listarPacientes();

            DefaultComboBoxModel<PacienteVO> modelo = new DefaultComboBoxModel<>();
            for (PacienteVO paciente : pacientes) {
                modelo.addElement(paciente);
            }
            cbbPaciente.setModel(modelo);
            cbbPaciente.setSelectedIndex(-1);

            // Adiciona o listener para reagir à mudança de seleção
            cbbPaciente.addActionListener(e -> atualizarNomeResponsavel());
        } catch (Exception e) {
            messagesAlert.showErrorMessage("Erro ao carregar pacientes: " + e.getMessage());
        }
    }

//    private void atualizarNomeResponsavel() {
//        PacienteVO pacienteSelecionado = (PacienteVO) cbbPaciente.getSelectedItem();
//        if (pacienteSelecionado != null) {
//            if (pacienteSelecionado.getResponsavel() != null) {
//                lbNomeResponsavel.setText(pacienteSelecionado.getResponsavel().getNome());
//            } else {
//                lbNomeResponsavel.setText("");
//            }
//        } else {
//            lbNomeResponsavel.setText("");
//        }
//    }
    private void atualizarNomeResponsavel() {
        PacienteVO pacienteSelecionado = (PacienteVO) cbbPaciente.getSelectedItem();
        if (pacienteSelecionado != null) {
            if (pacienteSelecionado.getResponsavel() != null) {
                lbNomeResponsavel.setText(pacienteSelecionado.getResponsavel().getNome());
            } else {
                lbNomeResponsavel.setText("");
            }

            carregarDatasAtendimentos(pacienteSelecionado.getId());
        } else {
            lbNomeResponsavel.setText("");
            cbData.setModel(new DefaultComboBoxModel<>());
            ftfHora.setText("");
        }
    }

    private void limparFormulario() {
        cbbPaciente.setSelectedIndex(-1);
        cbData.setSelectedItem(null);
        ftfHora.setText("");
        tpDescricao.setText("");
        cbEmergencial.setSelected(false);
    }

    private void carregarDatasAtendimentos(Integer pacienteId) {
        try {
            AtendimentoRN atendimentoRN = new AtendimentoRN();
            List<Atendimento> atendimentos = atendimentoRN.buscarAtendimentosPorPacienteId(pacienteId);

            if (atendimentos == null || atendimentos.isEmpty()) {
                messagesAlert.showErrorMessage("Não há registros de atendimento para este usuário até o momento.");
                return;
            }

            // Preenche o comboBox com as datas dos atendimentos
            DefaultComboBoxModel<String> modeloData = new DefaultComboBoxModel<>();
            DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
            for (Atendimento atendimento : atendimentos) {
                modeloData.addElement(atendimento.getData().format(dateFormatter));
            }
            cbData.setModel(modeloData);
            cbData.setSelectedIndex(-1);

            // Adiciona listener para carregar a hora ao selecionar a data
            cbData.addActionListener(e -> carregarHoraAtendimento(atendimentos));
        } catch (Exception e) {
            messagesAlert.showErrorMessage("Erro ao carregar datas de atendimentos: " + e.getMessage());
        }
    }

    private void carregarHoraAtendimento(List<Atendimento> atendimentos) {
        try {
            String dataSelecionada = (String) cbData.getSelectedItem();
            if (dataSelecionada == null || dataSelecionada.isEmpty()) {
                ftfHora.setText("");
                return;
            }

            // Encontra o atendimento correspondente
            DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
            LocalDate data = LocalDate.parse(dataSelecionada, dateFormatter);
            Atendimento atendimentoCorrespondente = atendimentos.stream()
                    .filter(a -> a.getData().equals(data))
                    .findFirst()
                    .orElse(null);

            if (atendimentoCorrespondente != null) {
                ftfHora.setText(atendimentoCorrespondente.getHora().toString());
                ftfHora.setEditable(false); // Bloqueia edição
            } else {
                ftfHora.setText("");
            }
        } catch (Exception e) {
            messagesAlert.showErrorMessage("Erro ao carregar hora do atendimento: " + e.getMessage());
        }
    }

    private boolean validarCampos() {
        if (cbbPaciente.getSelectedIndex() == -1) {
            messagesAlert.showErrorMessage("O campo Paciente é obrigatório.");
            cbbPaciente.requestFocus();
            return false;
        }

        if (cbData.getSelectedItem() == null || ((String) cbData.getSelectedItem()).trim().isEmpty()) {
            messagesAlert.showErrorMessage("O campo Data é obrigatório.");
            cbData.requestFocus();
            return false;
        }

        if (ftfHora.getText().trim().isEmpty()) {
            messagesAlert.showErrorMessage("O campo Hora é obrigatório.");
            ftfHora.requestFocus();
            return false;
        }

        if (relatoAtendimento == null || relatoAtendimento.trim().isEmpty()) {
            messagesAlert.showErrorMessage("É obrigatório adicionar o texto do relato.");
            return false;
        }

        return true;
    }

}
