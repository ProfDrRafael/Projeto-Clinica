/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Visao.Telas;

import Regradenegocio.*;
import VO.AgendaVO;
import VO.EstagiarioVO;
import VO.EstagiarioXPacienteVO;
import VO.PacienteVO;
import Visao.Components.SimpleForm;
import Visao.Utils.EditorTextPaneEstilization;
import Visao.Utils.MessagesAlert;
import Visao.Utils.RedimencionarIcones;
import com.formdev.flatlaf.FlatClientProperties;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 *
 * @author john
 */
public class FormAgenda extends SimpleForm {

    private final MessagesAlert messagesAlert;

    /**
     * Creates new form agendaForm
     */
    public FormAgenda() {
        initComponents();
        // remove background customizado e volta ao default do L&F
        pCentro.putClientProperty(FlatClientProperties.STYLE, "background:null");
        pSouth.putClientProperty(FlatClientProperties.STYLE, "background:null");
        
        messagesAlert = new MessagesAlert();
        // redimensionarIcones();

        RedimencionarIcones redimencionarIcone = new RedimencionarIcones();
        redimencionarIcone.redimensionarIcones(btSalvar, "/Multimidia/imagens/salvar-btn.png", 40);

        EditorTextPaneEstilization.EstilizeEditorTextPane(tpObservacoes);
        EditorTextPaneEstilization.JTextComponentStylization(tpObservacoes, btNegrito, btItalico, btSublinhado);
        EditorTextPaneEstilization.JTextComponentUndoRedo(tpObservacoes);

        cbTipoAtendimento.setSelectedIndex(-1);
        carregarEstagiarios();
        carregarPacientes();
        adicionarListenerPaciente();
    }

    // Novo construtor para pré-carregar data e hora
    public FormAgenda(LocalDate data, LocalTime hora, byte sala) {
        this(); // Chama o construtor padrão (que chama initComponents())
        // Pré-carrega o campo de data no formato "dd-MM-yyyy"
        tfData.setText(data.format(DateTimeFormatter.ofPattern("dd-MM-yyyy")));
        tfData.setEnabled(false);

        // Pré-carrega a hora no combobox. 
        // Converte o LocalTime para String no formato esperado ("H:mm")
        String horaFormatada = hora.format(DateTimeFormatter.ofPattern("H:mm"));
        cbHora.setSelectedItem(horaFormatada);
        cbHora.setEnabled(false);

        cbSala.setSelectedIndex(sala - 1);
        cbSala.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateChooser1 = new com.raven.datechooser.DateChooser();
        pSouth = new javax.swing.JPanel();
        btSalvar = new javax.swing.JButton();
        btCancelar = new javax.swing.JButton();
        pCentro = new javax.swing.JPanel();
        lbData = new javax.swing.JLabel();
        lbHora = new javax.swing.JLabel();
        lbPaciente = new javax.swing.JLabel();
        lbCelular = new javax.swing.JLabel();
        lbContato2 = new javax.swing.JLabel();
        lbObservacoes = new javax.swing.JLabel();
        cbHora = new javax.swing.JComboBox<>();
        lbSala = new javax.swing.JLabel();
        cbSala = new javax.swing.JComboBox<>();
        lbEstagiario = new javax.swing.JLabel();
        ftfCelular = new javax.swing.JFormattedTextField();
        ftfCelular2 = new javax.swing.JFormattedTextField();
        cbEstagiario = new javax.swing.JComboBox<>();
        tfData = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tpObservacoes = new javax.swing.JTextPane();
        cbPaciente = new javax.swing.JComboBox<>();
        btNegrito = new javax.swing.JButton();
        btItalico = new javax.swing.JButton();
        btSublinhado = new javax.swing.JButton();
        lbTipoAtendimento = new javax.swing.JLabel();
        cbTipoAtendimento = new javax.swing.JComboBox<>();
        lbGrupo = new javax.swing.JLabel();
        cbbGrupo = new javax.swing.JComboBox<>();
        pNorth = new javax.swing.JPanel();
        lbClinica = new javax.swing.JLabel();
        lbProntuario = new javax.swing.JLabel();
        lblLogoAgenda = new javax.swing.JLabel();

        dateChooser1.setTextField(tfData);

        setMaximumSize(new java.awt.Dimension(950, 630));
        setMinimumSize(new java.awt.Dimension(950, 630));
        setPreferredSize(new java.awt.Dimension(950, 630));
        setLayout(new java.awt.BorderLayout());

        pSouth.setBackground(java.awt.SystemColor.controlHighlight);
        pSouth.setPreferredSize(new java.awt.Dimension(950, 60));

        btSalvar.setBackground(new java.awt.Color(102, 255, 102));
        btSalvar.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btSalvar.setForeground(new java.awt.Color(51, 51, 51));
        btSalvar.setText("Salvar");
        btSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSalvarActionPerformed(evt);
            }
        });

        btCancelar.setBackground(new java.awt.Color(255, 102, 102));
        btCancelar.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btCancelar.setForeground(new java.awt.Color(51, 51, 51));
        btCancelar.setText("Cancelar");
        btCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pSouthLayout = new javax.swing.GroupLayout(pSouth);
        pSouth.setLayout(pSouthLayout);
        pSouthLayout.setHorizontalGroup(
            pSouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pSouthLayout.createSequentialGroup()
                .addContainerGap(762, Short.MAX_VALUE)
                .addComponent(btCancelar)
                .addGap(18, 18, 18)
                .addComponent(btSalvar)
                .addGap(20, 20, 20))
        );
        pSouthLayout.setVerticalGroup(
            pSouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pSouthLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(pSouthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btSalvar)
                    .addComponent(btCancelar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(pSouth, java.awt.BorderLayout.PAGE_END);

        pCentro.setBackground(java.awt.SystemColor.controlHighlight);
        pCentro.setAutoscrolls(true);
        pCentro.setPreferredSize(new java.awt.Dimension(950, 736));

        lbData.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbData.setForeground(new java.awt.Color(0, 102, 102));
        lbData.setText("*Data:");

        lbHora.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbHora.setForeground(new java.awt.Color(0, 102, 102));
        lbHora.setText("*Hora:");

        lbPaciente.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbPaciente.setForeground(new java.awt.Color(0, 102, 102));
        lbPaciente.setText("*Paciente:");

        lbCelular.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbCelular.setForeground(new java.awt.Color(0, 102, 102));
        lbCelular.setText("*Celular:");

        lbContato2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbContato2.setForeground(new java.awt.Color(0, 102, 102));
        lbContato2.setText("Celular (Recado):");

        lbObservacoes.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbObservacoes.setForeground(new java.awt.Color(0, 102, 102));
        lbObservacoes.setText("Observações:");

        cbHora.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        cbHora.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8:00", "9:00", "10:00", "14:00", "15:00", "16:00", "17:00", "18:00" }));

        lbSala.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbSala.setForeground(new java.awt.Color(0, 102, 102));
        lbSala.setText("*Sala:");

        cbSala.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        cbSala.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06" }));

        lbEstagiario.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbEstagiario.setForeground(new java.awt.Color(0, 102, 102));
        lbEstagiario.setText("*Estagiário:");

        try {
            ftfCelular.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##) #####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        ftfCelular.setText("(  )       -    ");
        ftfCelular.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        try {
            ftfCelular2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##) ######-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        ftfCelular2.setText("(  )        -    ");
        ftfCelular2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        cbEstagiario.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        cbEstagiario.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bruna", "Pedro", "Maria" }));

        tfData.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        tpObservacoes.setFont(cbSala.getFont());
        jScrollPane1.setViewportView(tpObservacoes);

        cbPaciente.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        lbTipoAtendimento.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbTipoAtendimento.setForeground(new java.awt.Color(0, 102, 102));
        lbTipoAtendimento.setText("*Tipo Atendimento:");

        cbTipoAtendimento.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        cbTipoAtendimento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Triagem", "Psicoterapia", "Grupo" }));
        cbTipoAtendimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTipoAtendimentoActionPerformed(evt);
            }
        });

        lbGrupo.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbGrupo.setForeground(new java.awt.Color(0, 102, 102));
        lbGrupo.setText("Grupo:");

        cbbGrupo.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        javax.swing.GroupLayout pCentroLayout = new javax.swing.GroupLayout(pCentro);
        pCentro.setLayout(pCentroLayout);
        pCentroLayout.setHorizontalGroup(
            pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pCentroLayout.createSequentialGroup()
                .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pCentroLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbData)
                            .addComponent(tfData, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbHora))
                        .addGap(34, 34, 34)
                        .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbSala)
                            .addComponent(cbSala, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbEstagiario)
                            .addComponent(cbEstagiario, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pCentroLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pCentroLayout.createSequentialGroup()
                                .addComponent(lbTipoAtendimento)
                                .addGap(18, 18, 18)
                                .addComponent(cbTipoAtendimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lbGrupo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbbGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pCentroLayout.createSequentialGroup()
                                .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pCentroLayout.createSequentialGroup()
                                        .addComponent(lbPaciente)
                                        .addGap(236, 236, 236))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pCentroLayout.createSequentialGroup()
                                        .addComponent(cbPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(21, 21, 21)))
                                .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbCelular)
                                    .addComponent(ftfCelular, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(35, 35, 35)
                                .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ftfCelular2, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbContato2)))))
                    .addGroup(pCentroLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pCentroLayout.createSequentialGroup()
                                .addGap(697, 697, 697)
                                .addComponent(btNegrito)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btItalico)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btSublinhado))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 925, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbObservacoes))))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        pCentroLayout.setVerticalGroup(
            pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pCentroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbData)
                    .addComponent(lbHora)
                    .addComponent(lbSala)
                    .addComponent(lbEstagiario))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbSala, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbEstagiario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbCelular)
                    .addComponent(lbPaciente)
                    .addComponent(lbContato2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ftfCelular2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ftfCelular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbTipoAtendimento)
                        .addComponent(cbTipoAtendimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbGrupo))
                    .addGroup(pCentroLayout.createSequentialGroup()
                        .addComponent(cbbGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)))
                .addGap(9, 9, 9)
                .addComponent(lbObservacoes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btNegrito, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btItalico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btSublinhado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addGap(31, 31, 31))
        );

        add(pCentro, java.awt.BorderLayout.CENTER);

        pNorth.setBackground(new java.awt.Color(0, 102, 102));
        pNorth.setMaximumSize(new java.awt.Dimension(638, 150));
        pNorth.setMinimumSize(new java.awt.Dimension(638, 150));
        pNorth.setPreferredSize(new java.awt.Dimension(1015, 168));

        lbClinica.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbClinica.setForeground(new java.awt.Color(255, 255, 255));
        lbClinica.setText("Clínica de Psicologia");

        lbProntuario.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        lbProntuario.setForeground(new java.awt.Color(255, 255, 255));
        lbProntuario.setText("Agenda");

        lblLogoAgenda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Multimidia/imagens/logoAgenda.png"))); // NOI18N

        javax.swing.GroupLayout pNorthLayout = new javax.swing.GroupLayout(pNorth);
        pNorth.setLayout(pNorthLayout);
        pNorthLayout.setHorizontalGroup(
            pNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pNorthLayout.createSequentialGroup()
                .addComponent(lblLogoAgenda, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbProntuario)
                    .addGroup(pNorthLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lbClinica)))
                .addContainerGap(693, Short.MAX_VALUE))
        );
        pNorthLayout.setVerticalGroup(
            pNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pNorthLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbProntuario)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbClinica)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pNorthLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblLogoAgenda, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        add(pNorth, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    private void cbTipoAtendimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTipoAtendimentoActionPerformed
        Object selected = cbTipoAtendimento.getSelectedItem();
        boolean isGrupo = "Grupo".equalsIgnoreCase(String.valueOf(selected));
        boolean isTriagem = "Triagem".equalsIgnoreCase(String.valueOf(selected));

        cbPaciente.setEnabled(!isGrupo);
        ftfCelular.setEnabled(!isGrupo);
        ftfCelular2.setEnabled(!isGrupo);
        cbbGrupo.setEnabled(isGrupo);

        if (isGrupo) {
            carregarGrupos();
        }

        if (isTriagem) {
            carregarPacientesSemAtendimento();
        } else if (!isGrupo) {
            carregarPacientes();
        }

        //        Object selected = cbTipoAtendimento.getSelectedItem();
//        if (selected != null && "Grupo".equalsIgnoreCase(selected.toString())) {
//            ftfCelular.setEnabled(false);
//            ftfCelular2.setEnabled(false);
//            cbPaciente.setSelectedIndex(-1);
//            cbPaciente.setEnabled(false);
//        } else {
//            ftfCelular.setEnabled(true);
//            ftfCelular2.setEnabled(true);
//            cbPaciente.setEnabled(true);
//        }
    }//GEN-LAST:event_cbTipoAtendimentoActionPerformed

    private void btCancelarActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btCancelarActionPerformed
        limparCampos();
        messagesAlert.showSuccessMessage("Alterações canceladas.");
    }// GEN-LAST:event_btCancelarActionPerformed

    private void btSalvarActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btSalvarActionPerformed
        if (!validarCampos()) {
            return;
        }

        try {
            AgendaVO agendaVO = criarAgendaVO();
            AgendaRN agendaRN = new AgendaRN();
            agendaRN.salvar(agendaVO);

            // Verificar se o agendamento NÃO é emergencial
            if (cbTipoAtendimento.getSelectedItem() != null
                    && !cbTipoAtendimento.getSelectedItem().toString().equalsIgnoreCase("Emergencial")) {

                // Obter o paciente e o estagiário selecionados
                PacienteRN pacienteRN = new PacienteRN();
                PacienteVO paciente = pacienteRN.buscarPorNomePreciso(cbPaciente.getSelectedItem().toString());

                EstagiarioRN estagiarioRN = new EstagiarioRN();
                EstagiarioVO estagiario = estagiarioRN.buscarEstagiarioPorNome(cbEstagiario.getSelectedItem().toString());

                if (paciente != null && estagiario != null) {
                    // Verificar se já existe uma associação entre o paciente e o estagiário
                    EstagiarioXPacienteRN estagiarioXPacienteRN = new EstagiarioXPacienteRN();
                    List<EstagiarioXPacienteVO> associacoes = estagiarioXPacienteRN.buscarPorPaciente(paciente.getId());

                    boolean jaAssociado = associacoes.stream()
                            .anyMatch(assoc -> assoc.getEstagiario() != null
                            && assoc.getEstagiario().getId().equals(estagiario.getId()));

                    // Se não estiver associado, criar a associação
                    if (!jaAssociado) {
                        EstagiarioXPacienteVO novaAssociacao = new EstagiarioXPacienteVO();
                        novaAssociacao.setEstagiario(estagiario);
                        novaAssociacao.setPaciente(paciente);

                        estagiarioXPacienteRN.associarEstagiarioPaciente(novaAssociacao);
                    }
                }
            }

            messagesAlert.showSuccessMessage("Agendamento salvo com sucesso!");
            limparCampos();
        } catch (IllegalArgumentException e) {
            messagesAlert.showErrorMessage(e.getMessage());
        } catch (Exception e) {
            messagesAlert.showErrorMessage("Erro inesperado ao salvar o agendamento. Tente novamente.");
            e.printStackTrace();
        }
    }// GEN-LAST:event_btSalvarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCancelar;
    private javax.swing.JButton btItalico;
    private javax.swing.JButton btNegrito;
    private javax.swing.JButton btSalvar;
    private javax.swing.JButton btSublinhado;
    private javax.swing.JComboBox<String> cbEstagiario;
    private javax.swing.JComboBox<String> cbHora;
    private javax.swing.JComboBox<String> cbPaciente;
    private javax.swing.JComboBox<String> cbSala;
    private javax.swing.JComboBox<String> cbTipoAtendimento;
    private javax.swing.JComboBox<String> cbbGrupo;
    private com.raven.datechooser.DateChooser dateChooser1;
    private javax.swing.JFormattedTextField ftfCelular;
    private javax.swing.JFormattedTextField ftfCelular2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbCelular;
    private javax.swing.JLabel lbClinica;
    private javax.swing.JLabel lbContato2;
    private javax.swing.JLabel lbData;
    private javax.swing.JLabel lbEstagiario;
    private javax.swing.JLabel lbGrupo;
    private javax.swing.JLabel lbHora;
    private javax.swing.JLabel lbObservacoes;
    private javax.swing.JLabel lbPaciente;
    private javax.swing.JLabel lbProntuario;
    private javax.swing.JLabel lbSala;
    private javax.swing.JLabel lbTipoAtendimento;
    private javax.swing.JLabel lblLogoAgenda;
    private javax.swing.JPanel pCentro;
    private javax.swing.JPanel pNorth;
    private javax.swing.JPanel pSouth;
    private javax.swing.JTextField tfData;
    private javax.swing.JTextPane tpObservacoes;
    // End of variables declaration//GEN-END:variables

    private void limparCampos() {
        tfData.setText("");
        cbHora.setSelectedIndex(0);
        cbEstagiario.setSelectedIndex(0);
        tpObservacoes.setText("");
        ftfCelular.setText("");
        ftfCelular2.setText("");
    }

    private void carregarPacientes() {
        PacienteRN pacienteRN = new PacienteRN();
        List<PacienteVO> pacientes = pacienteRN.listarPacientes();

        if (pacientes != null) {
            cbPaciente.removeAllItems();
            for (PacienteVO paciente : pacientes) {
                cbPaciente.addItem(paciente.getPaciente());
            }
        }
    }

    private void carregarPacientesSemAtendimento() {
        PacienteRN pacienteRN = new PacienteRN();
        List<PacienteVO> pacientes = pacienteRN.listarPacientesSemAtendimento();

        cbPaciente.removeAllItems();
        if (pacientes != null && !pacientes.isEmpty()) {
            for (PacienteVO paciente : pacientes) {
                cbPaciente.addItem(paciente.getPaciente());
            }
        } else {
            cbPaciente.addItem("Nenhum paciente disponível");
        }
    }

    private void carregarEstagiarios() {
        EstagiarioRN estagiarioRN = new EstagiarioRN();
        List<EstagiarioVO> estagiarios = estagiarioRN.listarEstagiarios();

        if (estagiarios == null || estagiarios.isEmpty()) {
            bloquearCampos();
            messagesAlert.showErrorMessage("Não há estagiários cadastrados no sistema");
            return;
        }

        cbEstagiario.removeAllItems();
        for (EstagiarioVO estagiario : estagiarios) {
            cbEstagiario.addItem(estagiario.getNomeCompleto());
        }
    }

    private void carregarGrupos() {
        cbbGrupo.removeAllItems();
        // Suponha que você tenha um GrupoRN
        List<String> grupos = new GrupoRN().listarNomesDosGrupos();
        for (String grupo : grupos) {
            cbbGrupo.addItem(grupo);
        }
    }

    private void adicionarListenerPaciente() {
        cbPaciente.addActionListener(evt -> carregarTelefonesPaciente());
    }

    private void carregarTelefonesPaciente() {
        String nomePaciente = (String) cbPaciente.getSelectedItem(); // Nome do paciente selecionado
        if (nomePaciente != null) {
            PacienteRN pacienteRN = new PacienteRN();
            PacienteVO paciente = pacienteRN.buscarPorNomePreciso(nomePaciente);

            if (paciente != null) {
                ftfCelular.setText(paciente.getCelular());
                ftfCelular2.setText(paciente.getCelularContato());
            } else {
                ftfCelular.setText("");
                ftfCelular2.setText("");
                messagesAlert.showErrorMessage("Paciente não encontrado.");
            }
        }
    }

    private AgendaVO criarAgendaVO() {
        boolean isEmergencial = "Emergencial".equalsIgnoreCase((String) cbTipoAtendimento.getSelectedItem());

        System.out.println(tfData.getText());
        System.out.println(cbHora.getSelectedItem());

        // Validação e conversão de dados
        LocalDate data = LocalDate.parse(tfData.getText(), DateTimeFormatter.ofPattern("dd-MM-yyyy"));
//        LocalTime hora = LocalTime.parse(cbHora.getSelectedItem().toString(), DateTimeFormatter.ofPattern("HH:mm"));
        LocalTime hora = LocalTime.parse(cbHora.getSelectedItem().toString(), DateTimeFormatter.ofPattern("H:mm"));
        String horaFormatada = hora.format(DateTimeFormatter.ofPattern("HH:mm"));

        System.out.println(horaFormatada);

        PacienteRN pacienteRN = new PacienteRN();
        PacienteVO paciente;

        if (isEmergencial) {
            paciente = pacienteRN.buscarPacientePorId(24);

            if (paciente == null) {
                throw new IllegalArgumentException("Paciente não encontrado.");
            }
        } else {
            paciente = pacienteRN.buscarPorNomePreciso(cbPaciente.getSelectedItem().toString());
        }

        if (paciente == null) {
            throw new IllegalArgumentException("Paciente não encontrado.");
        }

        EstagiarioRN estagiarioRN = new EstagiarioRN();
        EstagiarioVO estagiario = estagiarioRN.buscarEstagiarioPorNome(cbEstagiario.getSelectedItem().toString());

        if (estagiario == null) {
            throw new IllegalArgumentException("Estagiário não encontrado.");
        }

        return new AgendaVO(null, data, LocalTime.parse(horaFormatada), Byte.valueOf(cbSala.getSelectedItem().toString()), paciente, estagiario, null, cbTipoAtendimento.getSelectedItem().toString()); // atendimento definido para 1, mas preciso rever essa lógica
    }

    private void bloquearCampos() {
        tfData.setEditable(false);
        tfData.setEnabled(false);
        tfData.setText("");
        cbHora.setEnabled(false);
        cbSala.setEnabled(false);
        cbEstagiario.setEnabled(false);
        cbPaciente.setEnabled(false);
        ftfCelular.setEditable(false);
        ftfCelular.setEnabled(false);
        ftfCelular2.setEditable(false);
        ftfCelular2.setEnabled(false);
        tpObservacoes.setEditable(false);
        tpObservacoes.setEnabled(false);
        btSalvar.setEnabled(false);
        btCancelar.setEnabled(false);
        btNegrito.setEnabled(false);
        btItalico.setEnabled(false);
        btSublinhado.setEnabled(false);
    }

    private boolean validarCampos() {
        if (tfData.getText().trim().isEmpty()) {
            MessagesAlert.showWarningMessage("O campo Data é obrigatório.", response -> {
                if (response) {
                    tfData.requestFocus();
                }
            });
            return false;
        }
        if (cbHora.getSelectedItem() == null) {
            MessagesAlert.showWarningMessage("O campo Hora é obrigatório.", response -> {
                if (response) {
                    cbHora.requestFocus();
                }
            });
            return false;
        }
        if (cbSala.getSelectedItem() == null) {
            MessagesAlert.showWarningMessage("O campo Sala é obrigatório.", response -> {
                if (response) {
                    cbSala.requestFocus();
                }
            });
            return false;
        }
        if (cbEstagiario.getSelectedItem() == null) {
            MessagesAlert.showWarningMessage("O campo Estagiário é obrigatório.", response -> {
                if (response) {
                    cbEstagiario.requestFocus();
                }
            });
            return false;
        }

        // Verifica se o tipo de atendimento é "Emergencial"
        if (cbTipoAtendimento.getSelectedItem() != null
                && cbTipoAtendimento.getSelectedItem().toString().equalsIgnoreCase("Emergencial")) {

            // Validação do campo Estagiário
            if (cbPaciente.getSelectedItem() == null) {
                MessagesAlert.showWarningMessage("O campo Estagiário é obrigatório.", response -> {
                    if (response) {
                        cbPaciente.requestFocus();
                    }
                });
                return false;
            }

            // Validação do campo Celular vazio ou com máscara padrão
            String celular = ftfCelular.getText().trim();
            if (celular.isEmpty() || celular.equals("() -")) {
                MessagesAlert.showWarningMessage("O campo Celular é obrigatório.", response -> {
                    if (response) {
                        ftfCelular.requestFocus();
                    }
                });
                return false;
            }

            // Validação do formato do número de celular
            if (!validarFormatoCelular(celular)) {
                MessagesAlert.showWarningMessage("O número de celular está no formato incorreto.", response -> {
                    if (response) {
                        ftfCelular.requestFocus();
                    }
                });
                return false;
            }
        }

        return true;
    }

    private boolean validarFormatoCelular(String celular) {
        // Regex para validar um número no formato (XX) XXXX-XXXX ou (XX) XXXXX-XXXX
        String regex = "\\(\\d{2}\\) \\d{4,5}-\\d{4}";
        return celular.matches(regex);
    }

    private void setEmergencyMode(boolean isEmergency) {
        cbPaciente.setEnabled(!isEmergency);
        ftfCelular.setEnabled(!isEmergency);
        ftfCelular2.setEnabled(!isEmergency);

        cbPaciente.setSelectedIndex(isEmergency ? -1 : 0);
    }
}
