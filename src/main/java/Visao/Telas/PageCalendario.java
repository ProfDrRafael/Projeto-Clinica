/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Visao.Telas;

import Regradenegocio.AgendaRN;
import Regradenegocio.SessaoRN;
import VO.AgendaVO;
import VO.SessaoVO;
import Visao.Components.SimpleForm;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.time.LocalDate;
import java.time.YearMonth;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;

/**
 *
 * @author otniel
 */
public class PageCalendario extends SimpleForm {
    private YearMonth currentYearMonth;
    private Map<LocalDate, List<AgendaVO>> agendamentos;
    private final Color COR_DIA_HOJE = new Color(173, 216, 230);
    private final Color COR_AGENDAMENTO = new Color(144, 238, 144);
    private final AgendaRN agendaRN; 
    private final SessaoRN sessao;
    
    /**
     * Creates new form PageCalendario
     */
    public PageCalendario() {
        initComponents();
        currentYearMonth = YearMonth.now(); 
        agendaRN = new AgendaRN();
        
        sessao = new SessaoRN();
        
        carregarAgendamentosDoBanco(sessao.buscarUltimaSessao()); 
        updateCalendar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pNorth = new javax.swing.JPanel();
        lbClinica = new javax.swing.JLabel();
        lbProntuario = new javax.swing.JLabel();
        pnPageCalendario = new javax.swing.JPanel();
        pnAgendamentos = new javax.swing.JPanel();
        lbAgendamentos = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        pnCalendario = new javax.swing.JPanel();
        pnCabecalho = new javax.swing.JPanel();
        lbMesAno = new javax.swing.JLabel();
        btnMesAnterior = new javax.swing.JButton();
        btnProximoMes = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        pNorth.setBackground(new java.awt.Color(0, 102, 102));
        pNorth.setMaximumSize(new java.awt.Dimension(638, 150));
        pNorth.setMinimumSize(new java.awt.Dimension(638, 150));

        lbClinica.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbClinica.setForeground(new java.awt.Color(255, 255, 255));
        lbClinica.setText("Cl√≠nica de Psicologia");

        lbProntuario.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        lbProntuario.setForeground(new java.awt.Color(255, 255, 255));
        lbProntuario.setText("Agenda");

        javax.swing.GroupLayout pNorthLayout = new javax.swing.GroupLayout(pNorth);
        pNorth.setLayout(pNorthLayout);
        pNorthLayout.setHorizontalGroup(
            pNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pNorthLayout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addGroup(pNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbClinica)
                    .addComponent(lbProntuario))
                .addContainerGap(823, Short.MAX_VALUE))
        );
        pNorthLayout.setVerticalGroup(
            pNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pNorthLayout.createSequentialGroup()
                .addGap(0, 44, Short.MAX_VALUE)
                .addComponent(lbProntuario)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbClinica)
                .addGap(0, 52, Short.MAX_VALUE))
        );

        add(pNorth, java.awt.BorderLayout.NORTH);

        pnPageCalendario.setBackground(java.awt.SystemColor.controlHighlight);

        pnAgendamentos.setBackground(java.awt.SystemColor.controlHighlight);
        pnAgendamentos.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.gray));
        pnAgendamentos.setAutoscrolls(true);

        lbAgendamentos.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbAgendamentos.setText("Agendamentos");

        jScrollPane1.setAutoscrolls(true);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setFocusable(false);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout pnAgendamentosLayout = new javax.swing.GroupLayout(pnAgendamentos);
        pnAgendamentos.setLayout(pnAgendamentosLayout);
        pnAgendamentosLayout.setHorizontalGroup(
            pnAgendamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnAgendamentosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnAgendamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnAgendamentosLayout.createSequentialGroup()
                        .addComponent(lbAgendamentos)
                        .addGap(0, 113, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnAgendamentosLayout.setVerticalGroup(
            pnAgendamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnAgendamentosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbAgendamentos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1))
        );

        pnCalendario.setBackground(java.awt.SystemColor.controlHighlight);
        pnCalendario.setAutoscrolls(true);
        pnCalendario.setPreferredSize(new java.awt.Dimension(450, 420));
        pnCalendario.setLayout(new java.awt.GridLayout(0, 7, 1, 1));

        pnCabecalho.setBackground(java.awt.SystemColor.controlHighlight);

        lbMesAno.setFont(new java.awt.Font("Cantarell", 0, 15)); // NOI18N

        btnMesAnterior.setText("<");
        btnMesAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMesAnteriorActionPerformed(evt);
            }
        });

        btnProximoMes.setText(">");
        btnProximoMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProximoMesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnCabecalhoLayout = new javax.swing.GroupLayout(pnCabecalho);
        pnCabecalho.setLayout(pnCabecalhoLayout);
        pnCabecalhoLayout.setHorizontalGroup(
            pnCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCabecalhoLayout.createSequentialGroup()
                .addGap(313, 313, 313)
                .addComponent(btnMesAnterior)
                .addGap(71, 71, 71)
                .addComponent(lbMesAno)
                .addGap(57, 57, 57)
                .addComponent(btnProximoMes)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnCabecalhoLayout.setVerticalGroup(
            pnCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnCabecalhoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMesAnterior)
                    .addComponent(btnProximoMes)
                    .addComponent(lbMesAno))
                .addContainerGap())
        );

        javax.swing.GroupLayout pnPageCalendarioLayout = new javax.swing.GroupLayout(pnPageCalendario);
        pnPageCalendario.setLayout(pnPageCalendarioLayout);
        pnPageCalendarioLayout.setHorizontalGroup(
            pnPageCalendarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnPageCalendarioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnPageCalendarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnPageCalendarioLayout.createSequentialGroup()
                        .addComponent(pnCalendario, javax.swing.GroupLayout.PREFERRED_SIZE, 733, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnAgendamentos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(pnCabecalho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnPageCalendarioLayout.setVerticalGroup(
            pnPageCalendarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnPageCalendarioLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnCabecalho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnPageCalendarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnCalendario, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                    .addComponent(pnAgendamentos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(26, 26, 26))
        );

        add(pnPageCalendario, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnMesAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMesAnteriorActionPerformed
        navigateMonth(-1);
    }//GEN-LAST:event_btnMesAnteriorActionPerformed

    private void btnProximoMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProximoMesActionPerformed
        navigateMonth(1);
    }//GEN-LAST:event_btnProximoMesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMesAnterior;
    private javax.swing.JButton btnProximoMes;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lbAgendamentos;
    private javax.swing.JLabel lbClinica;
    private javax.swing.JLabel lbMesAno;
    private javax.swing.JLabel lbProntuario;
    private javax.swing.JPanel pNorth;
    private javax.swing.JPanel pnAgendamentos;
    private javax.swing.JPanel pnCabecalho;
    private javax.swing.JPanel pnCalendario;
    private javax.swing.JPanel pnPageCalendario;
    // End of variables declaration//GEN-END:variables

    private void navigateMonth(int months) {
        currentYearMonth = months > 0 ?
        currentYearMonth.plusMonths(1) :
        currentYearMonth.minusMonths(1);
        updateCalendar();
    }

    private void updateCalendar() {
        pnCalendario.removeAll();

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MMMM yyyy", new Locale("pt", "BR"));
        lbMesAno.setText(currentYearMonth.format(formatter));

        String[] diasDaSemana = {"DOM", "SEG", "TER", "QUA", "QUI", "SEX", "SAB"};
        for (String dia : diasDaSemana) {
            JLabel lbl = new JLabel(dia, SwingConstants.CENTER);
            lbl.setBorder(BorderFactory.createLineBorder(Color.GRAY));
            pnCalendario.add(lbl);
        }

        LocalDate primeiroDia = currentYearMonth.atDay(1);
        int diaDaSemana = primeiroDia.getDayOfWeek().getValue() % 7; 

        // Dias do m√™s anterior
        LocalDate ultimoDiaMesAnterior = currentYearMonth.minusMonths(1).atEndOfMonth();
        for (int i = diaDaSemana - 1; i >= 0; i--) {
            LocalDate data = ultimoDiaMesAnterior.minusDays(i);
            pnCalendario.add(criarCelulaDia(data, data.getDayOfMonth(), LocalDate.now(), true));
        }

        // Dias do m√™s atual
        for (int dia = 1; dia <= currentYearMonth.lengthOfMonth(); dia++) {
            LocalDate data = currentYearMonth.atDay(dia);
            pnCalendario.add(criarCelulaDia(data, dia, LocalDate.now(), false));
        }

        // Dias do pr√≥ximo m√™s
        int totalCelulas = diaDaSemana + currentYearMonth.lengthOfMonth();
        int celulasRestantes = 42 - totalCelulas;
        LocalDate primeiroDiaProximoMes = currentYearMonth.plusMonths(1).atDay(1);
        for (int i = 0; i < celulasRestantes; i++) {
            LocalDate data = primeiroDiaProximoMes.plusDays(i);
            pnCalendario.add(criarCelulaDia(data, data.getDayOfMonth(), LocalDate.now(), true));
        }

        pnCalendario.revalidate();
        pnCalendario.repaint();
    }

    private JPanel criarCelulaDia(LocalDate data, int dia, LocalDate hoje, boolean isOutroMes) {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
        panel.setPreferredSize(new Dimension(70, 70)); // Tamanho

        JLabel lblDia = new JLabel(String.valueOf(dia), SwingConstants.CENTER);
        lblDia.setFont(new Font("Arial", Font.PLAIN, 14));

        if (isOutroMes) {
            panel.setBackground(new Color(230, 230, 230, 255)); // Cinza claro para dias de outros meses
            lblDia.setForeground(Color.GRAY);
        } else if (data.equals(hoje)) {
            panel.setBackground(COR_DIA_HOJE); // Azul claro para hoje
        } else if (agendamentos.containsKey(data)) {
            panel.setBackground(COR_AGENDAMENTO); // Verde claro para consultas
        }

        // Adicionar o n√∫mero de consultas
        if (agendamentos.containsKey(data)) {
            JLabel lblConsultas = new JLabel(agendamentos.get(data).size() > 1? agendamentos.get(data).size() + " consultas" : agendamentos.get(data).size() + "consulta", SwingConstants.CENTER);
            lblConsultas.setFont(new Font("Arial", Font.ITALIC, 10));
            panel.add(lblConsultas, BorderLayout.SOUTH);
        }

        // Mostrar detalhes
        panel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                lbAgendamentos.setText("Agendamentos" + " - " + data.getDayOfMonth() + "/" + data.getMonthValue());
                mostrarConsultas(data);
            }
        });

        panel.add(lblDia, BorderLayout.CENTER);
        return panel;
    }

    private void mostrarConsultas(LocalDate data) {
        jTextArea1.setText("");
        if (agendamentos.containsKey(data)) {
            for (AgendaVO agenda : agendamentos.get(data)) {
                String paciente = (agenda.getPacienteVO() != null) ? 
                    agenda.getPacienteVO().getNome() : "N/A";

                String estagiario = (agenda.getEstagiarioVO() != null) ? 
                    agenda.getEstagiarioVO().getNomeCompleto() : "N/A";

                jTextArea1.append(String.format(
                    "Hor√°rio: %s\nSala: %d\nPaciente: %s\nEstagi√°rio: %s\n--------------------\n",
                    agenda.getHora().toString(), 
                    agenda.getSala(),
                    paciente,
                    estagiario
                ));
            }
        }
    }
    
    private void carregarAgendamentosDoBanco(SessaoVO sessao) {
        agendamentos = new HashMap<>();
        
        List<AgendaVO> agendas;
        agendas = switch (sessao.getTipo()) {
            case "Administrador", "Secretaria" -> agendaRN.listarTodas();
            case "Orientador" -> agendaRN.listarPorOrientador(sessao.getEmail());
            case "Estagiario" -> agendaRN.listarPorEstagiario(sessao.getEmail());
            default -> List.of();
        }; 
        
        for (AgendaVO agenda : agendas) {
            LocalDate data = agenda.getData();
            agendamentos.computeIfAbsent(data, k -> new ArrayList<>()).add(agenda);
        }
    }
}
