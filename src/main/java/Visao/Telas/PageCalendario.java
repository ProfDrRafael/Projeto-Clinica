/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Visao.Telas;

import Regradenegocio.AgendaRN;
import Regradenegocio.SessaoRN;
import VO.AgendaVO;
import VO.SessaoVO;
import Visao.Components.PanelTemplate;
import Visao.JframeManager.FormManager;
import com.formdev.flatlaf.FlatClientProperties;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.YearMonth;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;

/**
 *
 * @author otniel
 */
public class PageCalendario extends PanelTemplate {

    private YearMonth currentYearMonth;
    private Map<LocalDate, List<AgendaVO>> agendamentos;
    private final Color COR_DIA_HOJE = new Color(173, 216, 230);
    private final Color COR_AGENDAMENTO = new Color(144, 238, 144);
    private final AgendaRN agendaRN;
    private final SessaoRN sessao;
    private JPanel ultimoDiaSelecionado = null;
    private LocalDate ultimoDiaSelecionadoData = null;

    /**
     * Creates new form PageCalendario
     */
    public PageCalendario() {
        initComponents();

        currentYearMonth = YearMonth.now();
        agendaRN = new AgendaRN();

        sessao = new SessaoRN();

        carregarAgendamentosDoBanco(sessao.buscarUltimaSessao());
        updateCalendar();
        configureTheme();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pNorth = new javax.swing.JPanel();
        lbClinica = new javax.swing.JLabel();
        lbProntuario = new javax.swing.JLabel();
        lblLogoCalendas = new javax.swing.JLabel();
        pnPageCalendario = new javax.swing.JPanel();
        pnAgendamentos = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pnHorarios = new javax.swing.JPanel();
        lbAgendamentos = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        cbSala = new javax.swing.JComboBox<>();
        pnCalendario = new javax.swing.JPanel();
        pnCabecalho = new javax.swing.JPanel();
        lbMesAno = new javax.swing.JLabel();
        btnMesAnterior = new javax.swing.JButton();
        btnProximoMes = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(950, 630));
        setMinimumSize(new java.awt.Dimension(950, 630));
        setPreferredSize(new java.awt.Dimension(950, 630));
        setLayout(new java.awt.BorderLayout());

        pNorth.setBackground(new java.awt.Color(0, 102, 102));
        pNorth.setMaximumSize(new java.awt.Dimension(638, 150));
        pNorth.setMinimumSize(new java.awt.Dimension(638, 150));
        pNorth.setPreferredSize(new java.awt.Dimension(950, 210));

        lbClinica.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbClinica.setForeground(new java.awt.Color(255, 255, 255));
        lbClinica.setText("Clínica de Psicologia");

        lbProntuario.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        lbProntuario.setForeground(new java.awt.Color(255, 255, 255));
        lbProntuario.setText("Calendário");

        lblLogoCalendas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Multimidia/imagens/logoCalendario.png"))); // NOI18N

        javax.swing.GroupLayout pNorthLayout = new javax.swing.GroupLayout(pNorth);
        pNorth.setLayout(pNorthLayout);
        pNorthLayout.setHorizontalGroup(
            pNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pNorthLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(lblLogoCalendas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbProntuario)
                    .addGroup(pNorthLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lbClinica)))
                .addContainerGap(576, Short.MAX_VALUE))
        );
        pNorthLayout.setVerticalGroup(
            pNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pNorthLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(lbProntuario)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbClinica)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pNorthLayout.createSequentialGroup()
                .addComponent(lblLogoCalendas, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        add(pNorth, java.awt.BorderLayout.NORTH);

        pnPageCalendario.setBackground(java.awt.SystemColor.controlHighlight);

        pnAgendamentos.setBackground(java.awt.SystemColor.controlHighlight);
        pnAgendamentos.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.gray));
        pnAgendamentos.setAutoscrolls(true);

        pnHorarios.setBackground(java.awt.SystemColor.controlHighlight);
        pnHorarios.setLayout(new javax.swing.BoxLayout(pnHorarios, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane2.setViewportView(pnHorarios);

        lbAgendamentos.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbAgendamentos.setText("Agendamentos");

        jScrollPane1.setAutoscrolls(true);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setFocusable(false);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel1.setText("Horários disponíveis:");

        cbSala.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sala 1", "Sala 2", "Sala 3", "Sala 4", "Sala 5", "Sala 6" }));
        cbSala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSalaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnAgendamentosLayout = new javax.swing.GroupLayout(pnAgendamentos);
        pnAgendamentos.setLayout(pnAgendamentosLayout);
        pnAgendamentosLayout.setHorizontalGroup(
            pnAgendamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnAgendamentosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnAgendamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                    .addGroup(pnAgendamentosLayout.createSequentialGroup()
                        .addGroup(pnAgendamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbAgendamentos)
                            .addGroup(pnAgendamentosLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbSala, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnAgendamentosLayout.setVerticalGroup(
            pnAgendamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnAgendamentosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbAgendamentos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnAgendamentosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbSala, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnCalendario.setBackground(java.awt.SystemColor.controlHighlight);
        pnCalendario.setAutoscrolls(true);
        pnCalendario.setPreferredSize(new java.awt.Dimension(450, 420));
        pnCalendario.setLayout(new java.awt.GridLayout(0, 7, 1, 1));

        pnCabecalho.setBackground(java.awt.SystemColor.controlHighlight);

        lbMesAno.setFont(new java.awt.Font("Cantarell", 0, 15)); // NOI18N

        btnMesAnterior.setText("<");
        btnMesAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMesAnteriorActionPerformed(evt);
            }
        });

        btnProximoMes.setText(">");
        btnProximoMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProximoMesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnCabecalhoLayout = new javax.swing.GroupLayout(pnCabecalho);
        pnCabecalho.setLayout(pnCabecalhoLayout);
        pnCabecalhoLayout.setHorizontalGroup(
            pnCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnCabecalhoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnMesAnterior)
                .addGap(71, 71, 71)
                .addComponent(lbMesAno)
                .addGap(57, 57, 57)
                .addComponent(btnProximoMes)
                .addGap(153, 153, 153))
        );
        pnCabecalhoLayout.setVerticalGroup(
            pnCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnCabecalhoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnCabecalhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMesAnterior)
                    .addComponent(btnProximoMes)
                    .addComponent(lbMesAno))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnPageCalendarioLayout = new javax.swing.GroupLayout(pnPageCalendario);
        pnPageCalendario.setLayout(pnPageCalendarioLayout);
        pnPageCalendarioLayout.setHorizontalGroup(
            pnPageCalendarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnPageCalendarioLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(pnPageCalendarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnCalendario, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnCabecalho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnAgendamentos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );
        pnPageCalendarioLayout.setVerticalGroup(
            pnPageCalendarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnPageCalendarioLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(pnPageCalendarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnPageCalendarioLayout.createSequentialGroup()
                        .addComponent(pnCabecalho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnCalendario, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnAgendamentos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(85, Short.MAX_VALUE))
        );

        add(pnPageCalendario, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnMesAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMesAnteriorActionPerformed
        navigateMonth(-1);
    }//GEN-LAST:event_btnMesAnteriorActionPerformed

    private void btnProximoMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProximoMesActionPerformed
        navigateMonth(1);
    }//GEN-LAST:event_btnProximoMesActionPerformed

    private void cbSalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSalaActionPerformed
        if (ultimoDiaSelecionadoData != null) {
            carregarHorariosDisponiveis(ultimoDiaSelecionadoData);
        }
    }//GEN-LAST:event_cbSalaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMesAnterior;
    private javax.swing.JButton btnProximoMes;
    private javax.swing.JComboBox<String> cbSala;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lbAgendamentos;
    private javax.swing.JLabel lbClinica;
    private javax.swing.JLabel lbMesAno;
    private javax.swing.JLabel lbProntuario;
    private javax.swing.JLabel lblLogoCalendas;
    private javax.swing.JPanel pNorth;
    private javax.swing.JPanel pnAgendamentos;
    private javax.swing.JPanel pnCabecalho;
    private javax.swing.JPanel pnCalendario;
    private javax.swing.JPanel pnHorarios;
    private javax.swing.JPanel pnPageCalendario;
    // End of variables declaration//GEN-END:variables

    private void configureTheme() {
        // 1. Força o painel de fundo a SEGUIR o tema
        pnPageCalendario.putClientProperty(FlatClientProperties.STYLE, "background: null");

        // 2. FORÇA os painéis internos a IGNORAREM o tema, mantendo o fundo claro.
        Color fundoClaro = new Color(242, 242, 242);

        // Blindando o Cabeçalho
        pnCabecalho.setOpaque(true);
        pnCabecalho.setBackground(fundoClaro);

        // Blindando a Grade do Calendário
        pnCalendario.setOpaque(true);
        pnCalendario.setBackground(Color.WHITE);

        // Blindando a Área de Agendamentos
        pnAgendamentos.setOpaque(true);
        pnAgendamentos.setBackground(fundoClaro);
        pnHorarios.setOpaque(true);
        pnHorarios.setBackground(fundoClaro);
        jScrollPane1.getViewport().setBackground(Color.WHITE);
        jScrollPane2.getViewport().setBackground(fundoClaro);
        jTextArea1.setBackground(Color.WHITE);

        // 3. NOVO: AJUSTA A COR DAS FONTES DENTRO DOS PAINÉIS BLINDADOS
        if (com.formdev.flatlaf.FlatLaf.isLafDark()) {
            // Se o tema for escuro, fontes ficam claras
            Color fonteClara = new Color(200, 200, 200); // Um cinza bem claro
            lbAgendamentos.setForeground(fonteClara);
            jLabel1.setForeground(fonteClara); // "Horários disponíveis:"
            lbMesAno.setForeground(fonteClara);
            jTextArea1.setForeground(fonteClara);

        } else {
            // Se o tema for claro, fontes ficam escuras
            Color fonteEscura = Color.BLACK;
            lbAgendamentos.setForeground(fonteEscura);
            jLabel1.setForeground(fonteEscura);
            lbMesAno.setForeground(fonteEscura);
            jTextArea1.setForeground(fonteEscura);
        }
    }

    private void navigateMonth(int months) {
        currentYearMonth = months > 0
                ? currentYearMonth.plusMonths(1)
                : currentYearMonth.minusMonths(1);
        updateCalendar();
    }

    private void updateCalendar() {
        pnCalendario.removeAll();

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MMMM yyyy", new Locale("pt", "BR"));
        lbMesAno.setText(currentYearMonth.format(formatter));

        String[] diasDaSemana = {"DOM", "SEG", "TER", "QUA", "QUI", "SEX", "SAB"};
        for (String dia : diasDaSemana) {
            JLabel lbl = new JLabel(dia, SwingConstants.CENTER);
            lbl.setBorder(BorderFactory.createLineBorder(Color.GRAY));
            pnCalendario.add(lbl);
        }

        LocalDate primeiroDia = currentYearMonth.atDay(1);
        int diaDaSemana = primeiroDia.getDayOfWeek().getValue() % 7;

        // Dias do mês anterior
        LocalDate ultimoDiaMesAnterior = currentYearMonth.minusMonths(1).atEndOfMonth();
        for (int i = diaDaSemana - 1; i >= 0; i--) {
            LocalDate data = ultimoDiaMesAnterior.minusDays(i);
            pnCalendario.add(criarCelulaDia(data, data.getDayOfMonth(), LocalDate.now(), true));
        }

        // Dias do mês atual
        for (int dia = 1; dia <= currentYearMonth.lengthOfMonth(); dia++) {
            LocalDate data = currentYearMonth.atDay(dia);
            pnCalendario.add(criarCelulaDia(data, dia, LocalDate.now(), false));
        }

        // Dias do próximo mês
        int totalCelulas = diaDaSemana + currentYearMonth.lengthOfMonth();
        int celulasRestantes = 42 - totalCelulas;
        LocalDate primeiroDiaProximoMes = currentYearMonth.plusMonths(1).atDay(1);
        for (int i = 0; i < celulasRestantes; i++) {
            LocalDate data = primeiroDiaProximoMes.plusDays(i);
            pnCalendario.add(criarCelulaDia(data, data.getDayOfMonth(), LocalDate.now(), true));
        }

        pnCalendario.revalidate();
        pnCalendario.repaint();
    }

    private JPanel criarCelulaDia(LocalDate data, int dia, LocalDate hoje, boolean isOutroMes) {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
        panel.setPreferredSize(new Dimension(70, 70)); // Tamanho

        JLabel lblDia = new JLabel(String.valueOf(dia), SwingConstants.CENTER);
        lblDia.setFont(new Font("Arial", Font.PLAIN, 14));

        //Define a cor da fonte do número do dia como preta
        lblDia.setForeground(Color.BLACK);

        if (isOutroMes) {
            panel.setBackground(new Color(245, 245, 245)); // Um cinza bem claro
            lblDia.setForeground(Color.GRAY);
        } else if (data.equals(hoje)) {
            panel.setBackground(COR_DIA_HOJE);
        } else if (agendamentos.containsKey(data)) {
            panel.setBackground(COR_AGENDAMENTO);
        } else {
            // ADICIONE ESTE ELSE PARA GARANTIR O FUNDO BRANCO NOS DIAS NORMAIS
            panel.setBackground(Color.WHITE);
        }

        // Adicionar o número de consultas
        if (agendamentos.containsKey(data)) {
            int numConsultas = agendamentos.get(data).size();
            String textoConsultas = (numConsultas > 1) ? numConsultas + " consultas" : numConsultas + " consulta";
            JLabel lblConsultas = new JLabel(textoConsultas, SwingConstants.CENTER);
            lblConsultas.setFont(new Font("Arial", Font.ITALIC, 10));

            // NOVO: Define a cor da fonte do texto de consultas como preta
            lblConsultas.setForeground(Color.BLACK);

            panel.add(lblConsultas, BorderLayout.SOUTH);
        }
        panel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (ultimoDiaSelecionado != null) {
                    ultimoDiaSelecionado.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
                }

                panel.setBorder(BorderFactory.createLineBorder(new Color(0, 102, 102), 2));
                ultimoDiaSelecionado = panel;

                lbAgendamentos.setText("Agendamentos - " + data.getDayOfMonth() + "/" + data.getMonthValue());
                mostrarConsultas(data);
                carregarHorariosDisponiveis(data);
            }
        });

        panel.add(lblDia, BorderLayout.CENTER);
        return panel;
    }

    private void mostrarConsultas(LocalDate data) {
        jTextArea1.setText("");
        if (agendamentos.containsKey(data)) {
            for (AgendaVO agenda : agendamentos.get(data)) {
                String paciente = (agenda.getPacienteVO() != null)
                        ? agenda.getPacienteVO().getNome() : "N/A";

                String estagiario = (agenda.getEstagiarioVO() != null)
                        ? agenda.getEstagiarioVO().getNomeCompleto() : "N/A";

                jTextArea1.append(String.format(
                        "Horário: %s\nSala: %d\nPaciente: %s\nEstagiário: %s\n--------------------\n",
                        agenda.getHora().toString(),
                        agenda.getSala(),
                        paciente,
                        estagiario
                ));
            }
        } else {
            jTextArea1.setText("Não há agendamentos para este dia.");
        }
    }

    private void carregarAgendamentosDoBanco(SessaoVO sessao) {
        agendamentos = new HashMap<>();

        List<AgendaVO> agendas;
        agendas = switch (sessao.getTipo()) {
            case "Administrador", "Secretaria" ->
                agendaRN.listarTodas();
            case "Orientador" ->
                agendaRN.listarPorOrientador(sessao.getEmail());
            case "Estagiario" ->
                agendaRN.listarPorEstagiario(sessao.getEmail());
            default ->
                List.of();
        };

        for (AgendaVO agenda : agendas) {
            LocalDate data = agenda.getData();
            agendamentos.computeIfAbsent(data, k -> new ArrayList<>()).add(agenda);
        }
    }

    private void carregarHorariosDisponiveis(LocalDate data) {
        pnHorarios.removeAll();

        // Salva a data clicada para atualização futura
        ultimoDiaSelecionadoData = data;

        // Bloqueia dias passados
        if (data.isBefore(LocalDate.now())) {
            JLabel lblMsg = new JLabel("Não é possível agendar para datas passadas.");
            // NOVO: Define a cor da fonte da mensagem
            if (com.formdev.flatlaf.FlatLaf.isLafDark()) {
                lblMsg.setForeground(new Color(200, 200, 200));
            }
            pnHorarios.add(lblMsg);
            pnHorarios.revalidate();
            pnHorarios.repaint();
            return;
        }

        // Recupera sala selecionada
        String salaSelecionada = (String) cbSala.getSelectedItem();
        byte sala = Byte.parseByte(salaSelecionada.replaceAll("\\D+", ""));

        List<LocalTime> fixedHorarios = Arrays.asList(
                LocalTime.of(8, 0),
                LocalTime.of(9, 0),
                LocalTime.of(10, 0),
                LocalTime.of(14, 0),
                LocalTime.of(15, 0),
                LocalTime.of(16, 0),
                LocalTime.of(17, 0),
                LocalTime.of(18, 0)
        );

        List<AgendaVO> agendasDia = agendamentos.getOrDefault(data, new ArrayList<>());

        boolean encontrouHorario = false;

        for (LocalTime horario : fixedHorarios) {
            boolean jaAgendado = agendasDia.stream()
                    .anyMatch(agenda -> agenda.getHora().equals(horario) && agenda.getSala() == sala);

            if (!jaAgendado) {
                encontrouHorario = true;

                JButton btn = new JButton(horario.toString());
                btn.setAlignmentX(Component.CENTER_ALIGNMENT);

                // Estilo
                btn.setFont(new Font("Segoe UI", Font.BOLD, 14));
                btn.setBackground(new Color(0, 109, 109));
                btn.setForeground(Color.WHITE);
                btn.setFocusPainted(false);
                btn.setOpaque(true);
                btn.setBorder(BorderFactory.createCompoundBorder(
                        BorderFactory.createLineBorder(new Color(0, 102, 102), 2),
                        BorderFactory.createEmptyBorder(1, 1, 1, 1)
                ));

                btn.setMaximumSize(new Dimension(Integer.MAX_VALUE, 35));
                btn.setMinimumSize(new Dimension(100, 35));
                btn.setPreferredSize(new Dimension(100, 35));

                btn.addActionListener(e -> {
                    FormManager.showForm(new FormAgenda(data, horario, sala));
                });

                pnHorarios.add(btn);
                pnHorarios.add(Box.createRigidArea(new Dimension(0, 5)));
            }
        }

        if (!encontrouHorario) {
            JLabel lblMsg = new JLabel("Nenhum horário disponível para esta sala.");
            // NOVO: Define a cor da fonte da mensagem
            if (com.formdev.flatlaf.FlatLaf.isLafDark()) {
                lblMsg.setForeground(new Color(200, 200, 200));
            }
            pnHorarios.add(lblMsg);
        }

        pnHorarios.revalidate();
        pnHorarios.repaint();
    }

}
