/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Visao.Telas;

import Visao.Components.PanelTemplate;
import Visao.JframeManager.FormManager;
import java.util.List;

import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import java.awt.Color;

/**
 *
 * @author john
 */
public class PageProgressBar extends PanelTemplate {

    private Runnable onComplete;
    private volatile boolean carregamentoPronto = false;

    /**
     * NOVO: Construtor padrão para permitir a criação da instância pelo
     * FormManager sem a tarefa inicial.
     */
    public PageProgressBar() {
        initComponents();
        setBackground(new Color(0, 102, 102));
        // O carregamento não é iniciado aqui.
    }

    /**
     * Construtor original mantido para uso direto.
     *
     * @param onComplete A tarefa a ser executada em segundo plano.
     */
    public PageProgressBar(Runnable onComplete) {
        this(); // Chama o construtor padrão para inicializar os componentes
        this.onComplete = onComplete;
        loadProgressBar(); // Inicia o carregamento
    }

 
    /**
     * NOVO MÉTODO PÚBLICO: Inicia o processo de carregamento.
     * Agora pode ser chamado pelo FormManager após a criação da tela.
     */
    public void loadProgressBar() {
        SwingWorker<Void, Integer> worker = new SwingWorker<>() {
            @Override
            protected Void doInBackground() throws Exception {
                int progress = 0;
                // Executa o trabalho de forma assíncrona
                Thread tarefaThread = new Thread(() -> {
                    if (getOnComplete() != null) {
                        getOnComplete().run();
                    }
                    setCarregamentoPronto(true);
                });
                tarefaThread.start();

                // Enquanto não estiver pronto, avança a barra
                while (!isCarregamentoPronto()) {
                    Thread.sleep(100);
                    progress = Math.min(progress + 5, 99); // Aumentei um pouco a velocidade
                    publish(progress);
                }

                publish(100);
                return null;
            }

            @Override
            protected void process(List<Integer> chunks) {
                int value = chunks.get(chunks.size() - 1);
                pbCarregando.setValue(value);
                lbCarregando.setText("Carregando" + (value % 3 == 0 ? "." : (value % 3 == 1 ? ".." : "...")));
            }

            @Override
            protected void done() {
                // O método done() não é mais necessário aqui, pois o FormManager
                // já lida com a troca de telas no método que chama o ProgressBar.
                // A tarefa real (onComplete) já terminou.
            }
        };
        worker.execute();
    }

    // O método close() foi removido pois não era utilizado e a gestão
    // da remoção do painel é feita pelo FormManager.
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbLogoCapiva = new javax.swing.JLabel();
        pbCarregando = new javax.swing.JProgressBar();
        lbCarregando = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 102, 102));
        setMaximumSize(new java.awt.Dimension(2000, 2000));
        setMinimumSize(new java.awt.Dimension(975, 630));
        setPreferredSize(new java.awt.Dimension(975, 630));

        lbLogoCapiva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Multimidia/imagens/capivaraLoading.gif"))); // NOI18N

        pbCarregando.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        pbCarregando.setStringPainted(true);

        lbCarregando.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        lbCarregando.setForeground(new java.awt.Color(255, 255, 255));
        lbCarregando.setText("Carregando...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(422, 422, 422)
                        .addComponent(lbCarregando))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(359, 359, 359)
                        .addComponent(lbLogoCapiva))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addComponent(pbCarregando, javax.swing.GroupLayout.PREFERRED_SIZE, 725, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(167, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(283, Short.MAX_VALUE)
                .addComponent(lbLogoCapiva)
                .addGap(18, 18, 18)
                .addComponent(pbCarregando, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lbCarregando)
                .addGap(192, 192, 192))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lbCarregando;
    private javax.swing.JLabel lbLogoCapiva;
    private javax.swing.JProgressBar pbCarregando;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the onComplete
     */
    public Runnable getOnComplete() {
        return onComplete;
    }

    /**
     * @param onComplete the onComplete to set
     */
    public void setOnComplete(Runnable onComplete) {
        this.onComplete = onComplete;
    }

    /**
     * @return the carregamentoPronto
     */
    public boolean isCarregamentoPronto() {
        return carregamentoPronto;
    }

    /**
     * @param carregamentoPronto the carregamentoPronto to set
     */
    public void setCarregamentoPronto(boolean carregamentoPronto) {
        this.carregamentoPronto = carregamentoPronto;
    }
}
