/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Visao.Telas;

import Persistencia.Entity.Pesquisador;
import VO.AdministradorVO;
import VO.EstagiarioVO;
import VO.OrientadorVO;
import VO.SecretariaVO;
import VO.UsuarioVO;
import Regradenegocio.UsuarioRN;
import Regradenegocio.PermissoesRN;
import VO.PesquisadorVO;
import Visao.Components.SimpleForm;
import Visao.Utils.MessagesAlert;
import Visao.Utils.RedimencionarIcones;
import com.formdev.flatlaf.FlatClientProperties;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.text.PlainDocument;
import java.awt.*;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.regex.Pattern;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;
import javax.swing.text.DocumentFilter.FilterBypass;
import raven.toast.Notifications;

/**
 *
 * @author john
 */
public class FormUsuario extends SimpleForm {

    private final Border defaultBorder = (new JTextField()).getBorder();
    private final Border errorBorder = BorderFactory.createLineBorder(Color.RED, 1);
    private final Pattern emailRegex = Pattern.compile("^[\\p{L}0-9._%+-]+@[\\p{L}0-9.-]+\\.[A-Za-z]{2,}$");
    private PanelPermissoesPesquisador panelPermissoes;
    private boolean isFormSendoEditado = false;
    private UsuarioVO usuarioVO;

    /**
     * Creates new form cadastroUsuario
     */
    public FormUsuario() {
        initComponents();
        
        this.isFormSendoEditado = false;
        
        // remove background customizado e volta ao default do L&F
        pCentro.putClientProperty(FlatClientProperties.STYLE, "background:null");
        // redimensionarIcones();

        RedimencionarIcones redimencionarIcone = new RedimencionarIcones();
        redimencionarIcone.redimensionarIcones(btSalvar, "/Multimidia/imagens/approved-icon.png");

        initValidacao();
        lbPasswordWarning1.setVisible(false);
        lbPasswordWarning2.setVisible(false);

    }

    private void addPanelPermissoes() {
        if (panelPermissoes == null) {
            panelPermissoes = new PanelPermissoesPesquisador(); 
            add(panelPermissoes, BorderLayout.SOUTH);
            revalidate();
            repaint();
        }
    }

    private void removePanelPermissoes() {
        if (panelPermissoes != null) {
            remove(panelPermissoes);
            panelPermissoes = null;
            revalidate();
            repaint();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pNorth = new javax.swing.JPanel();
        lbClinica = new javax.swing.JLabel();
        lbProntuario = new javax.swing.JLabel();
        lbLogoCadastro = new javax.swing.JLabel();
        pCentro = new javax.swing.JPanel();
        tfNome = new javax.swing.JTextField();
        lbNome = new javax.swing.JLabel();
        tfEmail = new javax.swing.JTextField();
        lbEmail = new javax.swing.JLabel();
        cbFuncao = new javax.swing.JComboBox<>();
        lbFuncao = new javax.swing.JLabel();
        pfSenha = new javax.swing.JPasswordField();
        lbSenha = new javax.swing.JLabel();
        btSalvar = new javax.swing.JButton();
        pfConfirmarSenha = new javax.swing.JPasswordField();
        lbConfirmarSenha = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        lbPasswordWarning1 = new javax.swing.JLabel();
        lbPasswordWarning2 = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(1000, 2000));
        setMinimumSize(new java.awt.Dimension(1000, 480));
        setPreferredSize(new java.awt.Dimension(1000, 480));
        setLayout(new java.awt.BorderLayout());

        pNorth.setBackground(new java.awt.Color(0, 102, 102));
        pNorth.setPreferredSize(new java.awt.Dimension(638, 183));

        lbClinica.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbClinica.setForeground(new java.awt.Color(255, 255, 255));
        lbClinica.setText("Clínica de Psicologia");

        lbProntuario.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        lbProntuario.setForeground(new java.awt.Color(255, 255, 255));
        lbProntuario.setText("Cadastro de Usuário");

        lbLogoCadastro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Multimidia/imagens/logoCadastrar_resized.png"))); // NOI18N

        javax.swing.GroupLayout pNorthLayout = new javax.swing.GroupLayout(pNorth);
        pNorth.setLayout(pNorthLayout);
        pNorthLayout.setHorizontalGroup(
            pNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pNorthLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbLogoCadastro, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pNorthLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lbClinica))
                    .addComponent(lbProntuario))
                .addContainerGap(489, Short.MAX_VALUE))
        );
        pNorthLayout.setVerticalGroup(
            pNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pNorthLayout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(lbProntuario)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbClinica)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pNorthLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbLogoCadastro, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(pNorth, java.awt.BorderLayout.NORTH);

        pCentro.setBackground(java.awt.SystemColor.controlHighlight);
        pCentro.setPreferredSize(new java.awt.Dimension(1024, 768));

        tfNome.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        lbNome.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbNome.setForeground(new java.awt.Color(0, 102, 102));
        lbNome.setText("*Nome:");

        tfEmail.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        lbEmail.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbEmail.setForeground(new java.awt.Color(0, 102, 102));
        lbEmail.setText("*Email:");

        cbFuncao.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        cbFuncao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Orientador", "Estagiário", "Secretária", "Pesquisador" }));
        cbFuncao.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbFuncaoItemStateChanged(evt);
            }
        });

        lbFuncao.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbFuncao.setForeground(new java.awt.Color(0, 102, 102));
        lbFuncao.setText("*Função:");

        pfSenha.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        pfSenha.setText("jPasswordField1");

        lbSenha.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbSenha.setForeground(new java.awt.Color(0, 102, 102));
        lbSenha.setText("*Senha:");

        btSalvar.setBackground(new java.awt.Color(102, 255, 102));
        btSalvar.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btSalvar.setForeground(new java.awt.Color(51, 51, 51));
        btSalvar.setText("Salvar");
        btSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSalvarActionPerformed(evt);
            }
        });

        pfConfirmarSenha.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        pfConfirmarSenha.setText("jPasswordField1");

        lbConfirmarSenha.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbConfirmarSenha.setForeground(new java.awt.Color(0, 102, 102));
        lbConfirmarSenha.setText("*Confirmar senha:");

        lbPasswordWarning1.setForeground(java.awt.Color.red);
        lbPasswordWarning1.setText(" ");

        lbPasswordWarning2.setForeground(java.awt.Color.red);
        lbPasswordWarning2.setText(" ");

        javax.swing.GroupLayout pCentroLayout = new javax.swing.GroupLayout(pCentro);
        pCentro.setLayout(pCentroLayout);
        pCentroLayout.setHorizontalGroup(
            pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(pCentroLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lbSenha)
                        .addComponent(lbNome))
                    .addComponent(lbEmail))
                .addGap(12, 12, 12)
                .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pCentroLayout.createSequentialGroup()
                        .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(tfEmail, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pCentroLayout.createSequentialGroup()
                                .addComponent(tfNome, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lbFuncao)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbFuncao, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pCentroLayout.createSequentialGroup()
                        .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pCentroLayout.createSequentialGroup()
                                .addComponent(pfSenha, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lbConfirmarSenha))
                            .addComponent(lbPasswordWarning1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbPasswordWarning2)
                            .addComponent(pfConfirmarSenha, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 17, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pCentroLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btSalvar)
                .addContainerGap())
        );
        pCentroLayout.setVerticalGroup(
            pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pCentroLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbNome)
                    .addComponent(tfNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbFuncao)
                    .addComponent(cbFuncao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbEmail)
                    .addComponent(tfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbConfirmarSenha)
                    .addComponent(pfConfirmarSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pfSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbSenha))
                .addGap(3, 3, 3)
                .addGroup(pCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbPasswordWarning1)
                    .addComponent(lbPasswordWarning2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btSalvar)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        add(pCentro, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void cbFuncaoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbFuncaoItemStateChanged
        String funcaoSelecionada = cbFuncao.getSelectedItem().toString();

        if ("Pesquisador".equals(funcaoSelecionada)) {
            addPanelPermissoes();
        } else {
            removePanelPermissoes();
        }
        
        if(isFormSendoEditado){
            panelPermissoes.preencherDadosEdicao(usuarioVO);
        }
    }//GEN-LAST:event_cbFuncaoItemStateChanged

    private void btSalvarActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btSalvarActionPerformed
        UsuarioRN usuarioRN = new UsuarioRN();
        MessagesAlert messagesAlert = new MessagesAlert();

        if (!validarFormulario()) {
            return;
        }

        try {
            String funcaoSelecionada = cbFuncao.getSelectedItem().toString();

            UsuarioVO usuarioVO;
            String nome = tfNome.getText();
            String email = tfEmail.getText();
            String senha = new String(pfSenha.getPassword());

            switch (funcaoSelecionada) {
                case "Administrador" -> {
                    usuarioVO = new AdministradorVO(0, nome, email, senha);
                }
                case "Estagiário" -> {
                    Integer ano = LocalDate.now().getYear();
                    usuarioVO = new EstagiarioVO(0, nome, email, senha, ano);
                }
                case "Orientador" -> {
                    usuarioVO = new OrientadorVO(0, nome, email, senha);
                }
                case "Secretária" -> {
                    usuarioVO = new SecretariaVO(0, nome, email, senha);
                }
                case "Pesquisador" -> {
                    usuarioVO = new PesquisadorVO(0, nome, email, senha);
                }
                default -> {
                    messagesAlert.showErrorMessage("Função inválida selecionada.");
                    return;
                }
            }

            // Validar se a senha e a confirmação coincidem
            String confirmacaoSenha = new String(pfConfirmarSenha.getPassword());
            if (!usuarioVO.getSenha().equals(confirmacaoSenha)) {
                messagesAlert.showErrorMessage("A senha e a confirmação de senha não coincidem.");
                return;
            }

            UsuarioVO usuarioResultado = usuarioRN.salvarUsuario(usuarioVO);

            // salvar o usuário
            if (usuarioRN.salvarUsuario(usuarioVO) != null) {
                messagesAlert.showSuccessMessage("Usuário salvo com sucesso!");

                if (usuarioVO instanceof PesquisadorVO) {
                    HashMap<String, java.util.List<String>> selecionados = panelPermissoes.obterOpcoesSelecionadas();

                    Pesquisador pesquisadorEntity = new Pesquisador();
                    pesquisadorEntity.setId(usuarioResultado.getId());

                    PermissoesRN permissaoRN = new PermissoesRN();
                    permissaoRN.salvarPermissoes(pesquisadorEntity, selecionados);
                }
            } else {
                messagesAlert.showErrorMessage("Erro ao salvar o usuário.");
            }
        } catch (HeadlessException | NumberFormatException e) {
            messagesAlert.showErrorMessage("Erro: " + e.getMessage());
        }
    }// GEN-LAST:event_btSalvarActionPerformed

    private static class NoDigitsFilter extends DocumentFilter {

        @Override
        public void insertString(FilterBypass fb, int offs, String str, AttributeSet a) throws BadLocationException {
            if (str != null && str.chars().allMatch(FormUsuario::isAllowedChar)) {
                super.insertString(fb, offs, str, a);
            }
        }

        @Override
        public void replace(FilterBypass fb, int offs, int len, String str, AttributeSet a) throws BadLocationException {
            if (str != null && str.chars().allMatch(FormUsuario::isAllowedChar)) {
                super.replace(fb, offs, len, str, a);
            }
        }
    }

    /**
     * helper: permite letras, acentos e espaço
     */
    private static boolean isAllowedChar(int codePoint) {
        return Character.isLetter(codePoint) || Character.isSpaceChar(codePoint);
    }

    /**
     * Chame no fim do construtor (depois de initComponents)
     */
    private void initValidacao() {
        /* aplica filtro ao campo Nome */
        ((PlainDocument) tfNome.getDocument()).setDocumentFilter(new NoDigitsFilter());

        /* listeners de validação */
        tfNome.getDocument().addDocumentListener(new SimpleListener(this::validarNome));
        tfEmail.getDocument().addDocumentListener(new SimpleListener(this::validarEmail));
        pfSenha.getDocument().addDocumentListener(new SimpleListener(this::validarSenhas));
        pfConfirmarSenha.getDocument().addDocumentListener(new SimpleListener(this::validarSenhas));

        lbPasswordWarning1.setText("Mínimo 8 caracteres");
        lbPasswordWarning2.setText("As duas senhas devem ser iguais");
    }

    private boolean validarNome() {
        String nome = tfNome.getText().trim();
        boolean ok = nome.length() >= 3 && nome.length() <= 60;
        tfNome.setBorder(ok ? defaultBorder : errorBorder);
        return ok;
    }

    private boolean validarEmail() {
        String email = tfEmail.getText().trim();
        boolean ok = emailRegex.matcher(email).matches();
        tfEmail.setBorder(ok ? defaultBorder : errorBorder);
        return ok;
    }

    private boolean validarSenhas() {
        String s1 = new String(pfSenha.getPassword());
        String s2 = new String(pfConfirmarSenha.getPassword());

        boolean lenOk = s1.length() >= 8;
        boolean mismatch = !s1.isEmpty() && !s2.isEmpty() && !s1.equals(s2);
        boolean bothFilled = !s1.isEmpty() && !s2.isEmpty();
        boolean ok = lenOk && !mismatch;

        lbPasswordWarning1.setVisible(!lenOk && !s1.isEmpty());
        lbPasswordWarning2.setVisible(mismatch);

        lbPasswordWarning1.setText("Mínimo 8 caracteres");
        lbPasswordWarning2.setText("As senhas não coincidem");

        pfSenha.setBorder(lenOk ? defaultBorder : errorBorder);
        pfConfirmarSenha.setBorder(ok ? defaultBorder : errorBorder);

        return ok;
    }

    private boolean validarFormulario() {
        if (!validarNome()) {
            MessagesAlert.showWarningMessage(
                    "Nome deve ter entre 3 e 60 letras.",
                    ok -> tfNome.requestFocus()
            );
            return false;
        }
        if (!validarEmail()) {
            MessagesAlert.showWarningMessage(
                    "E‑mail inválido.",
                    ok -> tfEmail.requestFocus()
            );
            return false;
        }
        if (!validarSenhas()) {
            MessagesAlert.showWarningMessage(
                    "Senha inválid.",
                    ok -> pfSenha.requestFocus()
            );
            return false;
        }
        return true;
    }

    public void preencherDadosFormulario(int pacienteId, String tipoUsuario) {
        this.isFormSendoEditado = true;
        
        try {
            UsuarioRN usuarioRN = new UsuarioRN();
            UsuarioVO usuario = usuarioRN.buscarUsuarioPorId(pacienteId, tipoUsuario);

            if (usuario == null) {
                Notifications.getInstance().show(Notifications.Type.ERROR, Notifications.Location.TOP_CENTER, "Usuário não encontrado!");
                return;
            }
            
            this.usuarioVO = usuario;

            tfNome.setText(usuario.getNomeCompleto());
            tfEmail.setText(usuario.getEmail());
            pfSenha.setText(usuario.getSenha());
            pfConfirmarSenha.setText(usuario.getSenha());
            cbFuncao.setSelectedItem(tipoUsuario);


        } catch (Exception ex) {
            System.out.println("Erro ao editar paciente: " + ex);
            Notifications.getInstance().show(Notifications.Type.ERROR, Notifications.Location.TOP_CENTER, "Erro ao carregar dados do paciente!");
        }
    }

    private static class SimpleListener implements javax.swing.event.DocumentListener {

        private final Runnable r;

        SimpleListener(Runnable r) {
            this.r = r;
        }

        public void insertUpdate(javax.swing.event.DocumentEvent e) {
            r.run();
        }

        public void removeUpdate(javax.swing.event.DocumentEvent e) {
            r.run();
        }

        public void changedUpdate(javax.swing.event.DocumentEvent e) {
            r.run();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btSalvar;
    private javax.swing.JComboBox<String> cbFuncao;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbClinica;
    private javax.swing.JLabel lbConfirmarSenha;
    private javax.swing.JLabel lbEmail;
    private javax.swing.JLabel lbFuncao;
    private javax.swing.JLabel lbLogoCadastro;
    private javax.swing.JLabel lbNome;
    private javax.swing.JLabel lbPasswordWarning1;
    private javax.swing.JLabel lbPasswordWarning2;
    private javax.swing.JLabel lbProntuario;
    private javax.swing.JLabel lbSenha;
    private javax.swing.JPanel pCentro;
    private javax.swing.JPanel pNorth;
    private javax.swing.JPasswordField pfConfirmarSenha;
    private javax.swing.JPasswordField pfSenha;
    private javax.swing.JTextField tfEmail;
    private javax.swing.JTextField tfNome;
    // End of variables declaration//GEN-END:variables

}
