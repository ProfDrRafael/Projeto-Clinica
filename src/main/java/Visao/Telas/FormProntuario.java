/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Visao.Telas;

import Persistencia.Entity.Estagiario;
import Persistencia.Entity.Paciente;
import Regradenegocio.EstagiarioRN;
import Regradenegocio.SessaoRN;
import VO.EstagiarioVO;
import VO.SessaoVO;
import Visao.Components.SimpleForm;
import Visao.Utils.EditorTextPaneEstilization;
import Visao.Utils.RedimencionarIcones;

import Visao.Utils.MessagesAlert;

import javax.swing.*;
import java.awt.event.ActionListener;
import java.util.List;

/**
 *
 * @author john
 */
public class FormProntuario extends SimpleForm {

    private final MessagesAlert messagesAlert;

    /**
     * Creates new form prontuarioForm
     */
    public FormProntuario() {
        initComponents();
        messagesAlert = new MessagesAlert();
        //redimensionarIcones();

        RedimencionarIcones redimencionarIcone = new RedimencionarIcones();
        redimencionarIcone.redimensionarIcones(btSalvar, "/Multimidia/imagens/approved-icon.png",40);
        redimencionarIcone.redimensionarIcones(btEditar, "/Multimidia/imagens/editar-btn.png",40);
        redimencionarIcone.redimensionarIcones(btHistoricoAtendimentos, "/Multimidia/imagens/historicoAtendimentos.png",40);

        // Para o campo de Queixa, use os botões de Queixa:
        EditorTextPaneEstilization.EstilizeEditorTextPane(tpQueixa);
        EditorTextPaneEstilization.JTextComponentStylization(tpQueixa, btNegritoQueixa, btItalicoQueixa, btSublinhadoQueixa);
        EditorTextPaneEstilization.JTextComponentUndoRedo(tpQueixa);

// Para o campo de Observações, use os botões de Observações:
        EditorTextPaneEstilization.EstilizeEditorTextPane(tpObservacoes);
        EditorTextPaneEstilization.JTextComponentStylization(tpObservacoes, btNegritoObs, btItalicoObs, btSublinhadoObs);
        EditorTextPaneEstilization.JTextComponentUndoRedo(tpObservacoes);
        inicializarComboBoxEstagiarios();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pNorth = new javax.swing.JPanel();
        lbClinica = new javax.swing.JLabel();
        lbProntuario = new javax.swing.JLabel();
        lbLogoProntuario = new javax.swing.JLabel();
        pnForm = new javax.swing.JPanel();
        jlQueixaInicial = new javax.swing.JLabel();
        jlObservacoes = new javax.swing.JLabel();
        jlPaciente = new javax.swing.JLabel();
        cbEstagiario = new javax.swing.JComboBox();
        jlEstagiario = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        btEditar = new javax.swing.JButton();
        btSalvar = new javax.swing.JButton();
        btHistoricoAtendimentos = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tpQueixa = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        tpObservacoes = new javax.swing.JTextPane();
        jSeparator2 = new javax.swing.JSeparator();
        cbPaciente = new javax.swing.JComboBox<>();
        btNegritoObs = new javax.swing.JButton();
        btItalicoObs = new javax.swing.JButton();
        btSublinhadoObs = new javax.swing.JButton();
        btSublinhadoQueixa = new javax.swing.JButton();
        btItalicoQueixa = new javax.swing.JButton();
        btNegritoQueixa = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(950, 764));
        setMinimumSize(new java.awt.Dimension(950, 764));
        setPreferredSize(new java.awt.Dimension(950, 764));
        setLayout(new java.awt.BorderLayout());

        pNorth.setBackground(new java.awt.Color(0, 102, 102));
        pNorth.setPreferredSize(new java.awt.Dimension(638, 183));

        lbClinica.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbClinica.setForeground(new java.awt.Color(255, 255, 255));
        lbClinica.setText("Clínica de Psicologia");

        lbProntuario.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        lbProntuario.setForeground(new java.awt.Color(255, 255, 255));
        lbProntuario.setText("Prontuário");

        lbLogoProntuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Multimidia/imagens/logoProntuario.png"))); // NOI18N

        javax.swing.GroupLayout pNorthLayout = new javax.swing.GroupLayout(pNorth);
        pNorth.setLayout(pNorthLayout);
        pNorthLayout.setHorizontalGroup(
            pNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pNorthLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbLogoProntuario, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbClinica)
                    .addComponent(lbProntuario))
                .addGap(0, 675, Short.MAX_VALUE))
        );
        pNorthLayout.setVerticalGroup(
            pNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pNorthLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbProntuario)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbClinica)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(pNorthLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbLogoProntuario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(pNorth, java.awt.BorderLayout.NORTH);

        pnForm.setBackground(java.awt.SystemColor.controlHighlight);
        pnForm.setPreferredSize(new java.awt.Dimension(940, 438));

        jlQueixaInicial.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jlQueixaInicial.setForeground(new java.awt.Color(0, 102, 102));
        jlQueixaInicial.setText("Queixa inicial:");

        jlObservacoes.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jlObservacoes.setForeground(new java.awt.Color(0, 102, 102));
        jlObservacoes.setText("Observações:");

        jlPaciente.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jlPaciente.setForeground(new java.awt.Color(0, 102, 102));
        jlPaciente.setText("*Paciente:");

        cbEstagiario.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        jlEstagiario.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jlEstagiario.setForeground(new java.awt.Color(0, 102, 102));
        jlEstagiario.setText("*Estagiário:");

        btEditar.setBackground(new java.awt.Color(255, 255, 51));
        btEditar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btEditar.setForeground(new java.awt.Color(51, 51, 51));
        btEditar.setText("Editar");

        btSalvar.setBackground(new java.awt.Color(102, 255, 102));
        btSalvar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btSalvar.setForeground(new java.awt.Color(51, 51, 51));
        btSalvar.setText("Salvar");
        btSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSalvarActionPerformed(evt);
            }
        });

        btHistoricoAtendimentos.setBackground(new java.awt.Color(204, 204, 204));
        btHistoricoAtendimentos.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btHistoricoAtendimentos.setForeground(new java.awt.Color(51, 51, 51));
        btHistoricoAtendimentos.setText("Histórico de atendimentos");

        tpQueixa.setFont(cbEstagiario.getFont());
        jScrollPane3.setViewportView(tpQueixa);

        tpObservacoes.setFont(cbEstagiario.getFont());
        jScrollPane4.setViewportView(tpObservacoes);

        cbPaciente.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        javax.swing.GroupLayout pnFormLayout = new javax.swing.GroupLayout(pnForm);
        pnForm.setLayout(pnFormLayout);
        pnFormLayout.setHorizontalGroup(
            pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnFormLayout.createSequentialGroup()
                .addGroup(pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnFormLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btEditar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btSalvar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btHistoricoAtendimentos))
                    .addGroup(pnFormLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator2))
                    .addGroup(pnFormLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnFormLayout.createSequentialGroup()
                                .addGroup(pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlObservacoes)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(48, 48, 48)
                                .addGroup(pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlQueixaInicial)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(pnFormLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlEstagiario)
                                    .addComponent(cbEstagiario, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, 0)
                                .addGroup(pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlPaciente)
                                    .addGroup(pnFormLayout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addComponent(cbPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 54, Short.MAX_VALUE))
                    .addGroup(pnFormLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1)))
                .addGap(20, 20, 20))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnFormLayout.createSequentialGroup()
                .addGap(184, 184, 184)
                .addComponent(btNegritoObs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btItalicoObs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btSublinhadoObs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btNegritoQueixa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btItalicoQueixa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btSublinhadoQueixa)
                .addGap(118, 118, 118))
        );
        pnFormLayout.setVerticalGroup(
            pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnFormLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnFormLayout.createSequentialGroup()
                        .addComponent(jlEstagiario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbEstagiario))
                    .addGroup(pnFormLayout.createSequentialGroup()
                        .addComponent(jlPaciente)
                        .addGap(6, 6, 6)
                        .addComponent(cbPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlQueixaInicial)
                    .addComponent(jlObservacoes))
                .addGap(9, 9, 9)
                .addGroup(pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnFormLayout.createSequentialGroup()
                        .addGroup(pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btNegritoQueixa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btItalicoQueixa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btSublinhadoQueixa))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                            .addComponent(jScrollPane3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btSalvar)
                            .addComponent(btHistoricoAtendimentos)
                            .addComponent(btEditar))
                        .addGap(81, 81, 81))
                    .addGroup(pnFormLayout.createSequentialGroup()
                        .addGroup(pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btNegritoObs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btItalicoObs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btSublinhadoObs))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        add(pnForm, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSalvarActionPerformed
        try {
            if (!validarCampos()) {
                return;
            }

            messagesAlert.showSuccessMessage("Prontuário salvo com sucesso!");
            //            limparFormulario();
        } catch (Exception e) {
            messagesAlert.showErrorMessage("Erro ao salvar o prontuário: " + e.getMessage());
        }
    }//GEN-LAST:event_btSalvarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btEditar;
    private javax.swing.JButton btHistoricoAtendimentos;
    private javax.swing.JButton btItalicoObs;
    private javax.swing.JButton btItalicoQueixa;
    private javax.swing.JButton btNegritoObs;
    private javax.swing.JButton btNegritoQueixa;
    private javax.swing.JButton btSalvar;
    private javax.swing.JButton btSublinhadoObs;
    private javax.swing.JButton btSublinhadoQueixa;
    private javax.swing.JComboBox cbEstagiario;
    private javax.swing.JComboBox<String> cbPaciente;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel jlEstagiario;
    private javax.swing.JLabel jlObservacoes;
    private javax.swing.JLabel jlPaciente;
    private javax.swing.JLabel jlQueixaInicial;
    private javax.swing.JLabel lbClinica;
    private javax.swing.JLabel lbLogoProntuario;
    private javax.swing.JLabel lbProntuario;
    private javax.swing.JPanel pNorth;
    private javax.swing.JPanel pnForm;
    private javax.swing.JTextPane tpObservacoes;
    private javax.swing.JTextPane tpQueixa;
    // End of variables declaration//GEN-END:variables

    /**
     * Inicializa o comboBox de estagiários.
     */
    private void inicializarComboBoxEstagiarios() {
        try {
            SessaoRN sessaoRN = new SessaoRN();
            SessaoVO sessaoAtual = sessaoRN.buscarUltimaSessao(); // Obtém a sessão atual

            // Verifica se a sessão foi encontrada
            if (sessaoAtual == null) {
                bloquearCampos();
                messagesAlert.showErrorMessage("Sessão não encontrada. Por favor, faça login novamente.");
                return;
            }

            EstagiarioRN estagiarioRN = new EstagiarioRN();
            List<EstagiarioVO> estagiariosVO = estagiarioRN.listarEstagiarios();
            List<Estagiario> estagiarios = estagiariosVO.stream()
                    .map(EstagiarioVO::toEntity)
                    .toList();

            // Se não houver estagiários cadastrados, bloqueia os campos e exibe a mensagem
            if (estagiarios == null || estagiarios.isEmpty()) {
                bloquearCampos();
                cbEstagiario.setModel(new DefaultComboBoxModel<>()); // Limpa o combo box
                messagesAlert.showErrorMessage("Não há estagiários cadastrados no sistema.");
                return;
            }

            // Prepara o modelo para o combo box e atribui-o
            DefaultComboBoxModel<Estagiario> modelo = new DefaultComboBoxModel<>();
            for (Estagiario estagiario : estagiarios) {
                modelo.addElement(estagiario);
            }
            cbEstagiario.setModel(modelo);

            // Verifica se a sessão é de um estagiário
            if ("Estagiario".equalsIgnoreCase(sessaoAtual.getTipo())) {
                // Procura o estagiário que corresponde ao e-mail da sessão
                Estagiario estagiarioSessao = estagiarios.stream()
                        .filter(estagiario -> estagiario.getEmail().equals(sessaoAtual.getEmail()))
                        .findFirst()
                        .orElse(null);

                if (estagiarioSessao != null) {
                    cbEstagiario.setSelectedItem(estagiarioSessao); // Seleciona o estagiário
                    cbEstagiario.setEnabled(false); // Desabilita o combo box
                    carregarPacientesPorEstagiario(); // Atualiza a lista de pacientes
                } else {
                    // Caso o estagiário da sessão não esteja na lista cadastrada
                    bloquearCampos();
                    messagesAlert.showErrorMessage("Estagiário da sessão não está cadastrado no sistema.");
                    return;
                }
            } else {
                // Se a sessão for de outro tipo (ex: coordenador ou administrador), deixa o combo box sem seleção
                cbEstagiario.setSelectedIndex(-1);
            }

            // Adiciona o listener para carregar pacientes ao selecionar um estagiário
            cbEstagiario.addActionListener(e -> carregarPacientesPorEstagiario());
        } catch (Exception e) {
//            messagesAlert.showErrorMessage("Erro ao carregar estagiários: " + e.getMessage());
            bloquearCampos();
            messagesAlert.showErrorMessage("Estagiário da sessão não está cadastrado no sistema.");
        }
    }

    /**
     * Carrega os pacientes do estagiário selecionado no comboBox de pacientes.
     */
    private void carregarPacientesPorEstagiario() {
        try {
            Estagiario estagiarioSelecionado = (Estagiario) cbEstagiario.getSelectedItem();
            if (estagiarioSelecionado != null) {
                try {
                    EstagiarioRN estagiarioRN = new EstagiarioRN();
                    List<Paciente> pacientes = estagiarioRN.buscarPacientesPorEstagiarioId(estagiarioSelecionado.getId());

                    DefaultComboBoxModel<Paciente> modelo = new DefaultComboBoxModel<>();
                    for (Paciente paciente : pacientes) {
                        modelo.addElement(paciente);
                    }

                    cbPaciente.setModel((DefaultComboBoxModel) modelo);
                    cbPaciente.setSelectedIndex(-1);

                    // Remove listeners antigos e adiciona o novo
                    for (ActionListener al : cbPaciente.getActionListeners()) {
                        cbPaciente.removeActionListener(al);
                    }
                } catch (Exception e) {
                    messagesAlert.showErrorMessage("Erro ao carregar pacientes: " + e.getMessage() + "Erro");
                }
            } else {
                cbPaciente.setModel((DefaultComboBoxModel) new DefaultComboBoxModel<Paciente>()); // Limpa o combo se nenhum estagiário for selecionado
            }
        } catch (Exception e) {
            messagesAlert.showErrorMessage("Erro ao carregar pacientes: " + e.getMessage() + "Erro");
        }
    }

    private boolean validarCampos() {
        if (cbEstagiario.getSelectedIndex() == -1) {
            messagesAlert.showErrorMessage("O campo Estagiário é obrigatório.");
            cbEstagiario.requestFocus();
            return false;
        }

        if (cbPaciente.getSelectedIndex() == -1) {
            messagesAlert.showErrorMessage("O campo Paciente é obrigatório.");
            cbPaciente.requestFocus();
            return false;
        }

        if (tpObservacoes.getText().trim().isEmpty()) {
            messagesAlert.showErrorMessage("O campo Observações é obrigatório.");
            tpObservacoes.requestFocus();
            return false;
        } else if (tpObservacoes.getText().length() > 150) {
            messagesAlert.showErrorMessage("O campo Observações deve ter no máximo 150 caracteres.");
            tpObservacoes.requestFocus();
            return false;
        }

        if (tpQueixa.getText().trim().isEmpty()) {
            messagesAlert.showErrorMessage("O campo Queixa Inicial é obrigatório.");
            tpQueixa.requestFocus();
            return false;
        } else if (tpQueixa.getText().length() > 1500) {
            messagesAlert.showErrorMessage("O campo Queixa Inicial deve ter no máximo 1500 caracteres.");
            tpQueixa.requestFocus();
            return false;
        }

        return true;
    }

    private void bloquearCampos() {
        cbEstagiario.setEnabled(false);
        cbEstagiario.setSelectedIndex(-1);
        cbPaciente.setEnabled(false);
        cbPaciente.setSelectedIndex(-1);
        tpObservacoes.setEnabled(false);
        tpQueixa.setEnabled(false);
        btNegritoObs.setEnabled(false);
        btItalicoObs.setEnabled(false);
        btSublinhadoObs.setEnabled(false);
        btNegritoQueixa.setEnabled(false);
        btItalicoQueixa.setEnabled(false);
        btSublinhadoQueixa.setEnabled(false);
        btSalvar.setEnabled(false);
        btHistoricoAtendimentos.setEnabled(false);
        btEditar.setEnabled(false);
    }
}
