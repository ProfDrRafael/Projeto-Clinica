/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Visao.Telas;
import Persistencia.Dao.ProntuarioDAO;
import Persistencia.Entity.Estagiario;
import Persistencia.Entity.Paciente;
import Regradenegocio.EstagiarioRN;
import Regradenegocio.SessaoRN;
import VO.EstagiarioVO;
import VO.SessaoVO;
import Visao.Components.SimpleForm;
import Visao.Utils.EditorTextPaneEstilization;
import Visao.Utils.RedimencionarIcones;

import Persistencia.Dao.EstagiarioDAO;
import Visao.Utils.MessagesAlert;

import javax.swing.*;
import java.awt.event.ActionListener;
import java.util.List;
/**
 *
 * @author john
 */
public class FormProntuario extends SimpleForm {
    private final MessagesAlert messagesAlert;

    /**
     * Creates new form prontuarioForm
     */
    public FormProntuario() {
        initComponents();
        messagesAlert = new MessagesAlert();
        //redimensionarIcones();
        
        EditorTextPaneEstilization.EstilizeEditorTextPane(tpObservacoes);
        EditorTextPaneEstilization.EstilizeEditorTextPane(tpQueixa);
        
        RedimencionarIcones redimencionarIcone = new RedimencionarIcones();
        redimencionarIcone.redimensionarIcones(btSalvar, "/Multimidia/imagens/approved-icon.png");
        redimencionarIcone.redimensionarIcones(btEditar, "/Multimidia/imagens/editar-btn.png");
        redimencionarIcone.redimensionarIcones(btHistoricoAtendimentos, "/Multimidia/imagens/historicoAtendimentos.png");

        configurarCampoEncaminhadoPor();
        inicializarComboBoxEstagiarios();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pNorth = new javax.swing.JPanel();
        lbClinica = new javax.swing.JLabel();
        lbProntuario = new javax.swing.JLabel();
        pnForm = new javax.swing.JPanel();
        jlQueixaInicial = new javax.swing.JLabel();
        jlObservacoes = new javax.swing.JLabel();
        jlPaciente = new javax.swing.JLabel();
        cbEstagiario = new javax.swing.JComboBox();
        jlEstagiario = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        btEditar = new javax.swing.JButton();
        btSalvar = new javax.swing.JButton();
        btHistoricoAtendimentos = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tpQueixa = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        tpObservacoes = new javax.swing.JTextPane();
        jSeparator2 = new javax.swing.JSeparator();
        lbEncaminhado = new javax.swing.JLabel();
        cbPaciente = new JComboBox<Paciente>();
        tfEncaminhadoPor = new javax.swing.JTextField();

        setMaximumSize(new java.awt.Dimension(950, 764));
        setMinimumSize(new java.awt.Dimension(950, 764));
        setPreferredSize(new java.awt.Dimension(950, 764));
        setLayout(new java.awt.BorderLayout());

        pNorth.setBackground(new java.awt.Color(0, 102, 102));
        pNorth.setPreferredSize(new java.awt.Dimension(638, 183));

        lbClinica.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lbClinica.setForeground(new java.awt.Color(255, 255, 255));
        lbClinica.setText("Clínica de Psicologia");

        lbProntuario.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        lbProntuario.setForeground(new java.awt.Color(255, 255, 255));
        lbProntuario.setText("Prontuário");

        javax.swing.GroupLayout pNorthLayout = new javax.swing.GroupLayout(pNorth);
        pNorth.setLayout(pNorthLayout);
        pNorthLayout.setHorizontalGroup(
            pNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pNorthLayout.createSequentialGroup()
                .addContainerGap(142, Short.MAX_VALUE)
                .addGroup(pNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbClinica)
                    .addComponent(lbProntuario))
                .addGap(0, 655, Short.MAX_VALUE))
        );
        pNorthLayout.setVerticalGroup(
            pNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pNorthLayout.createSequentialGroup()
                .addGap(0, 72, Short.MAX_VALUE)
                .addComponent(lbProntuario)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbClinica)
                .addGap(0, 63, Short.MAX_VALUE))
        );

        add(pNorth, java.awt.BorderLayout.NORTH);

        pnForm.setBackground(java.awt.SystemColor.controlHighlight);
        pnForm.setPreferredSize(new java.awt.Dimension(980, 438));

        jlQueixaInicial.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jlQueixaInicial.setForeground(new java.awt.Color(0, 102, 102));
        jlQueixaInicial.setText("Queixa inicial:");

        jlObservacoes.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jlObservacoes.setForeground(new java.awt.Color(0, 102, 102));
        jlObservacoes.setText("Observações:");

        jlPaciente.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jlPaciente.setForeground(new java.awt.Color(0, 102, 102));
        jlPaciente.setText("*Paciente:");

        cbEstagiario.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        jlEstagiario.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jlEstagiario.setForeground(new java.awt.Color(0, 102, 102));
        jlEstagiario.setText("*Estagiário:");

        btEditar.setBackground(new java.awt.Color(255, 255, 51));
        btEditar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btEditar.setForeground(new java.awt.Color(51, 51, 51));
        btEditar.setText("Editar");

        btSalvar.setBackground(new java.awt.Color(102, 255, 102));
        btSalvar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btSalvar.setForeground(new java.awt.Color(51, 51, 51));
        btSalvar.setText("Salvar");
        btSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSalvarActionPerformed(evt);
            }
        });

        btHistoricoAtendimentos.setBackground(new java.awt.Color(204, 204, 204));
        btHistoricoAtendimentos.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btHistoricoAtendimentos.setForeground(new java.awt.Color(51, 51, 51));
        btHistoricoAtendimentos.setText("Histórico de atendimentos");

        tpQueixa.setFont(cbEstagiario.getFont());
        jScrollPane3.setViewportView(tpQueixa);

        tpObservacoes.setFont(cbEstagiario.getFont());
        jScrollPane4.setViewportView(tpObservacoes);

        lbEncaminhado.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbEncaminhado.setForeground(new java.awt.Color(0, 102, 102));
        lbEncaminhado.setText("*Encaminhado por:");

        cbPaciente.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        tfEncaminhadoPor.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        javax.swing.GroupLayout pnFormLayout = new javax.swing.GroupLayout(pnForm);
        pnForm.setLayout(pnFormLayout);
        pnFormLayout.setHorizontalGroup(
            pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnFormLayout.createSequentialGroup()
                .addGroup(pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnFormLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btEditar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btSalvar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btHistoricoAtendimentos))
                    .addGroup(pnFormLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator2))
                    .addGroup(pnFormLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnFormLayout.createSequentialGroup()
                                .addGroup(pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tfEncaminhadoPor)
                                    .addComponent(jlEstagiario)
                                    .addComponent(cbEstagiario, 0, 449, Short.MAX_VALUE)
                                    .addComponent(lbEncaminhado))
                                .addGap(18, 18, 18)
                                .addGroup(pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnFormLayout.createSequentialGroup()
                                        .addComponent(jlPaciente)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 348, Short.MAX_VALUE))
                                    .addComponent(cbPaciente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(pnFormLayout.createSequentialGroup()
                                .addGroup(pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jlObservacoes))
                                .addGap(18, 18, 18)
                                .addGroup(pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnFormLayout.createSequentialGroup()
                                        .addComponent(jlQueixaInicial)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jScrollPane3)))))
                    .addGroup(pnFormLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1)))
                .addContainerGap())
        );
        pnFormLayout.setVerticalGroup(
            pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnFormLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlEstagiario)
                    .addComponent(jlPaciente))
                .addGap(6, 6, 6)
                .addGroup(pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbPaciente)
                    .addComponent(cbEstagiario))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbEncaminhado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfEncaminhadoPor, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlObservacoes)
                    .addComponent(jlQueixaInicial))
                .addGap(18, 18, 18)
                .addGroup(pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(pnFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btSalvar)
                    .addComponent(btHistoricoAtendimentos)
                    .addComponent(btEditar))
                .addGap(54, 54, 54))
        );

        add(pnForm, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSalvarActionPerformed
        try {
            if (!validarCampos()) {
                return;
            }

            messagesAlert.showSuccessMessage("Prontuário salvo com sucesso!");
//            limparFormulario();
        } catch (Exception e) {
            messagesAlert.showErrorMessage("Erro ao salvar o prontuário: " + e.getMessage());
        }
    }//GEN-LAST:event_btSalvarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btEditar;
    private javax.swing.JButton btHistoricoAtendimentos;
    private javax.swing.JButton btSalvar;
    private javax.swing.JComboBox cbEstagiario;
    private JComboBox<Paciente> cbPaciente;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel jlEstagiario;
    private javax.swing.JLabel jlObservacoes;
    private javax.swing.JLabel jlPaciente;
    private javax.swing.JLabel jlQueixaInicial;
    private javax.swing.JLabel lbClinica;
    private javax.swing.JLabel lbEncaminhado;
    private javax.swing.JLabel lbProntuario;
    private javax.swing.JPanel pNorth;
    private javax.swing.JPanel pnForm;
    private javax.swing.JTextField tfEncaminhadoPor;
    private javax.swing.JTextPane tpObservacoes;
    private javax.swing.JTextPane tpQueixa;
    // End of variables declaration//GEN-END:variables

    /**
     * Inicializa o comboBox de estagiários.
     */
    private void inicializarComboBoxEstagiarios() {
        try {
            SessaoRN sessaoRN = new SessaoRN();
            SessaoVO sessaoAtual = sessaoRN.buscarUltimaSessao(); // Obtém a sessão atual

            EstagiarioRN estagiarioRN = new EstagiarioRN();
            List<EstagiarioVO> estagiariosVO = estagiarioRN.listarEstagiarios();
            List<Estagiario> estagiarios = estagiariosVO.stream()
                    .map(EstagiarioVO::toEntity)
                    .toList();

            DefaultComboBoxModel<Estagiario> modelo = new DefaultComboBoxModel<>();
            for (Estagiario estagiario : estagiarios) {
                modelo.addElement(estagiario);
            }
            cbEstagiario.setModel(modelo);

            // Verifica se o tipo da sessão atual é "Estagiario"
            if ("Estagiario".equalsIgnoreCase(sessaoAtual.getTipo())) {
                // Filtra o estagiário correspondente ao e-mail da sessão
                Estagiario estagiarioSessao = estagiarios.stream()
                        .filter(estagiario -> estagiario.getEmail().equals(sessaoAtual.getEmail()))
                        .findFirst()
                        .orElse(null);

                if (estagiarioSessao != null) {
                    cbEstagiario.setSelectedItem(estagiarioSessao); // Seleciona o estagiário
                    cbEstagiario.setEnabled(false); // Desabilita o combo box
                    carregarPacientesPorEstagiario(); // Atualiza a lista de pacientes
                }
            } else {
                cbEstagiario.setSelectedIndex(-1); // Caso não seja um estagiário, deixa o combo box livre
            }

            // Adiciona o listener para carregar pacientes ao selecionar um estagiário
            cbEstagiario.addActionListener(e -> carregarPacientesPorEstagiario());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar estagiários: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Carrega os pacientes do estagiário selecionado no comboBox de pacientes.
     */
    private void carregarPacientesPorEstagiario() {
        try {
            Estagiario estagiarioSelecionado = (Estagiario) cbEstagiario.getSelectedItem();
            if (estagiarioSelecionado != null) {
                try {
                    EstagiarioRN estagiarioRN = new EstagiarioRN();
                    List<Paciente> pacientes = estagiarioRN.buscarPacientesPorEstagiarioId(estagiarioSelecionado.getId());

                    DefaultComboBoxModel<Paciente> modelo = new DefaultComboBoxModel<>();
                    for (Paciente paciente : pacientes) {
                        modelo.addElement(paciente);
                    }

                    cbPaciente.setModel(modelo);
                    cbPaciente.setSelectedIndex(-1);

                    // Remove listeners antigos e adiciona o novo
                    for (ActionListener al : cbPaciente.getActionListeners()) {
                        cbPaciente.removeActionListener(al);
                    }
                    cbPaciente.addActionListener(e -> atualizarEncaminhadoPor());
                } catch (Exception e) {
                    messagesAlert.showErrorMessage("Erro ao carregar pacientes: " + e.getMessage() + "Erro");
                }
            } else {
                cbPaciente.setModel(new DefaultComboBoxModel<Paciente>()); // Limpa o combo se nenhum estagiário for selecionado
            }
        } catch (Exception e) {
            messagesAlert.showErrorMessage("Erro ao carregar pacientes: " + e.getMessage() + "Erro");
        }
    }


    /**
     * Atualiza o campo "EncaminhadoPor" com base no paciente selecionado.
     */
    private void atualizarEncaminhadoPor() {
        Paciente pacienteSelecionado = (Paciente) cbPaciente.getSelectedItem();
        if (pacienteSelecionado != null) {
            tfEncaminhadoPor.setText(pacienteSelecionado.getEncaminhadoPor() != null ? pacienteSelecionado.getEncaminhadoPor() : "Não informado");
        } else {
            tfEncaminhadoPor.setText("");
        }
    }

    private void configurarCampoEncaminhadoPor() {
        tfEncaminhadoPor.setEditable(false); // Torna o campo somente leitura
    }

    private boolean validarCampos() {
        if (cbEstagiario.getSelectedIndex() == -1) {
            messagesAlert.showErrorMessage("O campo Estagiário é obrigatório.");
            cbEstagiario.requestFocus();
            return false;
        }

        if (cbPaciente.getSelectedIndex() == -1) {
            messagesAlert.showErrorMessage("O campo Paciente é obrigatório.");
            cbPaciente.requestFocus();
            return false;
        }

        if (tpObservacoes.getText().trim().isEmpty()) {
            messagesAlert.showErrorMessage("O campo Observações é obrigatório.");
            tpObservacoes.requestFocus();
            return false;
        } else if (tpObservacoes.getText().length() > 150) {
            messagesAlert.showErrorMessage("O campo Observações deve ter no máximo 150 caracteres.");
            tpObservacoes.requestFocus();
            return false;
        }

        if (tpQueixa.getText().trim().isEmpty()) {
            messagesAlert.showErrorMessage("O campo Queixa Inicial é obrigatório.");
            tpQueixa.requestFocus();
            return false;
        } else if (tpQueixa.getText().length() > 1500) {
            messagesAlert.showErrorMessage("O campo Queixa Inicial deve ter no máximo 1500 caracteres.");
            tpQueixa.requestFocus();
            return false;
        }

        return true;
    }


}
